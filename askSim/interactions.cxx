#include "interactions.h"

#include <iostream>
#include <fstream>


#include "TMath.h"
#include "TCanvas.h"
#include "TF1.h"
#include "TAxis.h"
#include "TGraph.h"
#include "TStopwatch.h"

#include "PhysicalConstants.h"
#include "SystemOfUnits.h"

using namespace std;


Double_t photoEnergies[7]={3,4,5,6,7,8,9};
Double_t fACoeffs[2][8][7]={{{0.000717441,0.0017132,0.0040823,0.00862846,0.0124416,0.0220459,0.0322875},{-0.243605,-0.575668,-1.55397,-3.2513,-5.97682,-9.49564,-13.9292},{-0.294221,-0.68615,-2.00422,-3.99962,-6.85504,-10.0571,-14.3723},{-0.165839,-0.382522,-1.20778,-2.33175,-3.88775,-5.63664,-8.41841},{-0.0522773,-0.119648,-0.403337,-0.761405,-1.27068,-1.88384,-2.94828},{-0.00932832,-0.0212458,-0.0755564,-0.14025,-0.237077,-0.361415,-0.581941},{-0.000875191,-0.00198784,-0.00739968,-0.0135406,-0.0232512,-0.0362966,-0.059275},{-3.34315e-05,-7.58405e-05,-0.00029434,-0.00053155,-0.000926514,-0.00147312,-0.00241995}},{{-0.00012692,-0.000284388,-0.000576155,-0.00119545,-0.00131739,-9.68923e-15,-6.4595e-15},{-0.0156303,-0.0358957,-0.0776855,-0.157375,-0.272001,-0.418614,-0.804505},{0.0469395,0.116294,0.306426,0.704127,1.44052,2.53335,3.21783},{0.0533855,0.130975,0.341034,0.752936,1.42593,2.28497,2.5487},{0.0224013,0.05496,0.144945,0.311903,0.557673,0.836073,0.808568},{0.00465891,0.0114666,0.0309029,0.0651445,0.110987,0.158968,0.134422},{0.000482236,0.00119302,0.00330277,0.00684336,0.011191,0.015614,0.0117383},{1.9837e-05,4.94018e-05,0.000140957,0.000287791,0.000454488,0.000628082,0.000428193}}};


Int_t fdSdNuPairNumPoints=999;
Double_t fdSdNuPairNuCut=0.001;

Double_t fdSdNuPairNus[999]={0.001,0.002,0.003,0.004,0.005,0.006,0.007,0.008,0.009,0.01,0.011,0.012,0.013,0.014,0.015,0.016,0.017,0.018,0.019,0.02,0.021,0.022,0.023,0.024,0.025,0.026,0.027,0.028,0.029,0.03,0.031,0.032,0.033,0.034,0.035,0.036,0.037,0.038,0.039,0.04,0.041,0.042,0.043,0.044,0.045,0.046,0.047,0.048,0.049,0.05,0.051,0.052,0.053,0.054,0.055,0.056,0.057,0.058,0.059,0.06,0.061,0.062,0.063,0.064,0.065,0.066,0.067,0.068,0.069,0.07,0.071,0.072,0.073,0.074,0.075,0.076,0.077,0.078,0.079,0.08,0.081,0.082,0.083,0.084,0.085,0.086,0.087,0.088,0.089,0.09,0.091,0.092,0.093,0.094,0.095,0.096,0.097,0.098,0.099,0.1,0.101,0.102,0.103,0.104,0.105,0.106,0.107,0.108,0.109,0.11,0.111,0.112,0.113,0.114,0.115,0.116,0.117,0.118,0.119,0.12,0.121,0.122,0.123,0.124,0.125,0.126,0.127,0.128,0.129,0.13,0.131,0.132,0.133,0.134,0.135,0.136,0.137,0.138,0.139,0.14,0.141,0.142,0.143,0.144,0.145,0.146,0.147,0.148,0.149,0.15,0.151,0.152,0.153,0.154,0.155,0.156,0.157,0.158,0.159,0.16,0.161,0.162,0.163,0.164,0.165,0.166,0.167,0.168,0.169,0.17,0.171,0.172,0.173,0.174,0.175,0.176,0.177,0.178,0.179,0.18,0.181,0.182,0.183,0.184,0.185,0.186,0.187,0.188,0.189,0.19,0.191,0.192,0.193,0.194,0.195,0.196,0.197,0.198,0.199,0.2,0.201,0.202,0.203,0.204,0.205,0.206,0.207,0.208,0.209,0.21,0.211,0.212,0.213,0.214,0.215,0.216,0.217,0.218,0.219,0.22,0.221,0.222,0.223,0.224,0.225,0.226,0.227,0.228,0.229,0.23,0.231,0.232,0.233,0.234,0.235,0.236,0.237,0.238,0.239,0.24,0.241,0.242,0.243,0.244,0.245,0.246,0.247,0.248,0.249,0.25,0.251,0.252,0.253,0.254,0.255,0.256,0.257,0.258,0.259,0.26,0.261,0.262,0.263,0.264,0.265,0.266,0.267,0.268,0.269,0.27,0.271,0.272,0.273,0.274,0.275,0.276,0.277,0.278,0.279,0.28,0.281,0.282,0.283,0.284,0.285,0.286,0.287,0.288,0.289,0.29,0.291,0.292,0.293,0.294,0.295,0.296,0.297,0.298,0.299,0.3,0.301,0.302,0.303,0.304,0.305,0.306,0.307,0.308,0.309,0.31,0.311,0.312,0.313,0.314,0.315,0.316,0.317,0.318,0.319,0.32,0.321,0.322,0.323,0.324,0.325,0.326,0.327,0.328,0.329,0.33,0.331,0.332,0.333,0.334,0.335,0.336,0.337,0.338,0.339,0.34,0.341,0.342,0.343,0.344,0.345,0.346,0.347,0.348,0.349,0.35,0.351,0.352,0.353,0.354,0.355,0.356,0.357,0.358,0.359,0.36,0.361,0.362,0.363,0.364,0.365,0.366,0.367,0.368,0.369,0.37,0.371,0.372,0.373,0.374,0.375,0.376,0.377,0.378,0.379,0.38,0.381,0.382,0.383,0.384,0.385,0.386,0.387,0.388,0.389,0.39,0.391,0.392,0.393,0.394,0.395,0.396,0.397,0.398,0.399,0.4,0.401,0.402,0.403,0.404,0.405,0.406,0.407,0.408,0.409,0.41,0.411,0.412,0.413,0.414,0.415,0.416,0.417,0.418,0.419,0.42,0.421,0.422,0.423,0.424,0.425,0.426,0.427,0.428,0.429,0.43,0.431,0.432,0.433,0.434,0.435,0.436,0.437,0.438,0.439,0.44,0.441,0.442,0.443,0.444,0.445,0.446,0.447,0.448,0.449,0.45,0.451,0.452,0.453,0.454,0.455,0.456,0.457,0.458,0.459,0.46,0.461,0.462,0.463,0.464,0.465,0.466,0.467,0.468,0.469,0.47,0.471,0.472,0.473,0.474,0.475,0.476,0.477,0.478,0.479,0.48,0.481,0.482,0.483,0.484,0.485,0.486,0.487,0.488,0.489,0.49,0.491,0.492,0.493,0.494,0.495,0.496,0.497,0.498,0.499,0.5,0.501,0.502,0.503,0.504,0.505,0.506,0.507,0.508,0.509,0.51,0.511,0.512,0.513,0.514,0.515,0.516,0.517,0.518,0.519,0.52,0.521,0.522,0.523,0.524,0.525,0.526,0.527,0.528,0.529,0.53,0.531,0.532,0.533,0.534,0.535,0.536,0.537,0.538,0.539,0.54,0.541,0.542,0.543,0.544,0.545,0.546,0.547,0.548,0.549,0.55,0.551,0.552,0.553,0.554,0.555,0.556,0.557,0.558,0.559,0.56,0.561,0.562,0.563,0.564,0.565,0.566,0.567,0.568,0.569,0.57,0.571,0.572,0.573,0.574,0.575,0.576,0.577,0.578,0.579,0.58,0.581,0.582,0.583,0.584,0.585,0.586,0.587,0.588,0.589,0.59,0.591,0.592,0.593,0.594,0.595,0.596,0.597,0.598,0.599,0.6,0.601,0.602,0.603,0.604,0.605,0.606,0.607,0.608,0.609,0.61,0.611,0.612,0.613,0.614,0.615,0.616,0.617,0.618,0.619,0.62,0.621,0.622,0.623,0.624,0.625,0.626,0.627,0.628,0.629,0.63,0.631,0.632,0.633,0.634,0.635,0.636,0.637,0.638,0.639,0.64,0.641,0.642,0.643,0.644,0.645,0.646,0.647,0.648,0.649,0.65,0.651,0.652,0.653,0.654,0.655,0.656,0.657,0.658,0.659,0.66,0.661,0.662,0.663,0.664,0.665,0.666,0.667,0.668,0.669,0.67,0.671,0.672,0.673,0.674,0.675,0.676,0.677,0.678,0.679,0.68,0.681,0.682,0.683,0.684,0.685,0.686,0.687,0.688,0.689,0.69,0.691,0.692,0.693,0.694,0.695,0.696,0.697,0.698,0.699,0.7,0.701,0.702,0.703,0.704,0.705,0.706,0.707,0.708,0.709,0.71,0.711,0.712,0.713,0.714,0.715,0.716,0.717,0.718,0.719,0.72,0.721,0.722,0.723,0.724,0.725,0.726,0.727,0.728,0.729,0.73,0.731,0.732,0.733,0.734,0.735,0.736,0.737,0.738,0.739,0.74,0.741,0.742,0.743,0.744,0.745,0.746,0.747,0.748,0.749,0.75,0.751,0.752,0.753,0.754,0.755,0.756,0.757,0.758,0.759,0.76,0.761,0.762,0.763,0.764,0.765,0.766,0.767,0.768,0.769,0.77,0.771,0.772,0.773,0.774,0.775,0.776,0.777,0.778,0.779,0.78,0.781,0.782,0.783,0.784,0.785,0.786,0.787,0.788,0.789,0.79,0.791,0.792,0.793,0.794,0.795,0.796,0.797,0.798,0.799,0.8,0.801,0.802,0.803,0.804,0.805,0.806,0.807,0.808,0.809,0.81,0.811,0.812,0.813,0.814,0.815,0.816,0.817,0.818,0.819,0.82,0.821,0.822,0.823,0.824,0.825,0.826,0.827,0.828,0.829,0.83,0.831,0.832,0.833,0.834,0.835,0.836,0.837,0.838,0.839,0.84,0.841,0.842,0.843,0.844,0.845,0.846,0.847,0.848,0.849,0.85,0.851,0.852,0.853,0.854,0.855,0.856,0.857,0.858,0.859,0.86,0.861,0.862,0.863,0.864,0.865,0.866,0.867,0.868,0.869,0.87,0.871,0.872,0.873,0.874,0.875,0.876,0.877,0.878,0.879,0.88,0.881,0.882,0.883,0.884,0.885,0.886,0.887,0.888,0.889,0.89,0.891,0.892,0.893,0.894,0.895,0.896,0.897,0.898,0.899,0.9,0.901,0.902,0.903,0.904,0.905,0.906,0.907,0.908,0.909,0.91,0.911,0.912,0.913,0.914,0.915,0.916,0.917,0.918,0.919,0.92,0.921,0.922,0.923,0.924,0.925,0.926,0.927,0.928,0.929,0.93,0.931,0.932,0.933,0.934,0.935,0.936,0.937,0.938,0.939,0.94,0.941,0.942,0.943,0.944,0.945,0.946,0.947,0.948,0.949,0.95,0.951,0.952,0.953,0.954,0.955,0.956,0.957,0.958,0.959,0.96,0.961,0.962,0.963,0.964,0.965,0.966,0.967,0.968,0.969,0.97,0.971,0.972,0.973,0.974,0.975,0.976,0.977,0.978,0.979,0.98,0.981,0.982,0.983,0.984,0.985,0.986,0.987,0.988,0.989,0.99,0.991,0.992,0.993,0.994,0.995,0.996,0.997,0.998,0.999};


Double_t fMuondSdNuPairValues[999]={2.4125879e-24,8.4223397e-25,4.3112911e-25,2.6017656e-25,1.7250269e-25,1.2165906e-25,8.966319e-26,6.8312379e-26,5.3420125e-26,4.2666009e-26,3.4679688e-26,2.8610074e-26,2.3906446e-26,2.020011e-26,1.7237057e-26,1.4837946e-26,1.2873445e-26,1.1248542e-26,9.892287e-27,8.7509192e-27,7.7831689e-27,6.9569776e-27,6.2471742e-27,5.6338001e-27,5.1008868e-27,4.6355518e-27,4.227322e-27,3.8676218e-27,3.549383e-27,3.2667431e-27,3.0148112e-27,2.7894852e-27,2.5873061e-27,2.4053437e-27,2.2411037e-27,2.0924543e-27,1.9575655e-27,1.8348607e-27,1.7229761e-27,1.6207281e-27,1.5270862e-27,1.4411499e-27,1.3621301e-27,1.2893335e-27,1.222149e-27,1.1600363e-27,1.1025171e-27,1.0491665e-27,9.9960603e-28,9.5349826e-28,9.105413e-28,8.7046466e-28,8.3302543e-28,7.9800511e-28,7.6520669e-28,7.3445231e-28,7.0558104e-28,6.7844706e-28,6.5291801e-28,6.2887357e-28,6.0620416e-28,5.8480987e-28,5.6459948e-28,5.4548955e-28,5.2740367e-28,5.1027178e-28,4.9402956e-28,4.7861788e-28,4.6398232e-28,4.5007272e-28,4.3684284e-28,4.2424993e-28,4.122545e-28,4.0081999e-28,3.8991251e-28,3.7950067e-28,3.6955528e-28,3.6004926e-28,3.5095739e-28,3.4225623e-28,3.3392389e-28,3.2594001e-28,3.1828554e-28,3.1094271e-28,3.0389492e-28,2.971266e-28,2.9062321e-28,2.843711e-28,2.7835749e-28,2.7257037e-28,2.6699847e-28,2.616312e-28,2.5645859e-28,2.5147129e-28,2.4666045e-28,2.4201778e-28,2.3753542e-28,2.33206e-28,2.2902252e-28,2.2497839e-28,2.2106739e-28,2.1728363e-28,2.1362153e-28,2.1007582e-28,2.0664151e-28,2.0331385e-28,2.0008836e-28,1.9696079e-28,1.9392709e-28,1.9098343e-28,1.8812616e-28,1.8535183e-28,1.8265712e-28,1.8003893e-28,1.7749425e-28,1.7502026e-28,1.7261425e-28,1.7027364e-28,1.6799598e-28,1.6577892e-28,1.6362023e-28,1.6151777e-28,1.5946952e-28,1.5747351e-28,1.5552789e-28,1.5363089e-28,1.5178079e-28,1.4997599e-28,1.4821491e-28,1.4649607e-28,1.4481804e-28,1.4317945e-28,1.4157899e-28,1.4001541e-28,1.3848751e-28,1.3699411e-28,1.3553412e-28,1.3410647e-28,1.3271014e-28,1.3134415e-28,1.3000755e-28,1.2869943e-28,1.2741893e-28,1.261652e-28,1.2493744e-28,1.2373487e-28,1.2255675e-28,1.2140235e-28,1.2027099e-28,1.1916199e-28,1.1807472e-28,1.1700855e-28,1.1596289e-28,1.1493715e-28,1.1393079e-28,1.1294328e-28,1.1197408e-28,1.1102271e-28,1.1008867e-28,1.0917151e-28,1.0827078e-28,1.0738604e-28,1.0651687e-28,1.0566286e-28,1.0482363e-28,1.0399879e-28,1.0318798e-28,1.0239084e-28,1.0160703e-28,1.0083621e-28,1.0007806e-28,9.9332281e-29,9.8598557e-29,9.7876601e-29,9.7166129e-29,9.6466865e-29,9.5778545e-29,9.5100909e-29,9.4433708e-29,9.3776699e-29,9.3129646e-29,9.2492322e-29,9.1864503e-29,9.1245977e-29,9.0636532e-29,9.0035968e-29,8.9444086e-29,8.8860696e-29,8.8285611e-29,8.7718652e-29,8.7159643e-29,8.6608414e-29,8.6064798e-29,8.5528635e-29,8.4999768e-29,8.4478044e-29,8.3963316e-29,8.3455439e-29,8.2954273e-29,8.2459681e-29,8.197153e-29,8.1489691e-29,8.1014038e-29,8.0544449e-29,8.0080803e-29,7.9622984e-29,7.917088e-29,7.8724378e-29,7.8283373e-29,7.7847759e-29,7.7417433e-29,7.6992296e-29,7.657225e-29,7.6157201e-29,7.5747057e-29,7.5341726e-29,7.4941121e-29,7.4545157e-29,7.4153749e-29,7.3766815e-29,7.3384276e-29,7.3006053e-29,7.2632071e-29,7.2262255e-29,7.1896533e-29,7.1534834e-29,7.1177088e-29,7.0823228e-29,7.0473187e-29,7.0126902e-29,6.9784309e-29,6.9445346e-29,6.9109953e-29,6.8778071e-29,6.8449643e-29,6.8124611e-29,6.7802921e-29,6.7484519e-29,6.7169352e-29,6.6857368e-29,6.6548517e-29,6.624275e-29,6.5940018e-29,6.5640273e-29,6.534347e-29,6.5049563e-29,6.4758508e-29,6.4470261e-29,6.4184779e-29,6.3902021e-29,6.3621946e-29,6.3344514e-29,6.3069686e-29,6.2797422e-29,6.2527687e-29,6.2260442e-29,6.1995652e-29,6.1733281e-29,6.1473294e-29,6.1215658e-29,6.0960339e-29,6.0707304e-29,6.0456521e-29,6.0207959e-29,5.9961586e-29,5.9717373e-29,5.947529e-29,5.9235307e-29,5.8997396e-29,5.876153e-29,5.852768e-29,5.8295819e-29,5.8065921e-29,5.783796e-29,5.761191e-29,5.7387746e-29,5.7165444e-29,5.6944979e-29,5.6726328e-29,5.6509467e-29,5.6294374e-29,5.6081025e-29,5.5869399e-29,5.5659474e-29,5.5451229e-29,5.5244643e-29,5.5039695e-29,5.4836364e-29,5.4634632e-29,5.4434478e-29,5.4235884e-29,5.403883e-29,5.3843298e-29,5.3649269e-29,5.3456726e-29,5.3265651e-29,5.3076026e-29,5.2887835e-29,5.2701061e-29,5.2515687e-29,5.2331697e-29,5.2149076e-29,5.1967806e-29,5.1787874e-29,5.1609263e-29,5.1431958e-29,5.1255946e-29,5.1081211e-29,5.090774e-29,5.0735518e-29,5.0564531e-29,5.0394766e-29,5.0226209e-29,5.0058847e-29,4.9892668e-29,4.9727658e-29,4.9563805e-29,4.9401097e-29,4.9239521e-29,4.9079065e-29,4.8919717e-29,4.8761467e-29,4.8604301e-29,4.844821e-29,4.8293181e-29,4.8139205e-29,4.7986269e-29,4.7834364e-29,4.7683479e-29,4.7533603e-29,4.7384726e-29,4.7236839e-29,4.7089932e-29,4.6943994e-29,4.6799016e-29,4.6654988e-29,4.6511902e-29,4.6369747e-29,4.6228516e-29,4.6088198e-29,4.5948786e-29,4.581027e-29,4.5672641e-29,4.5535892e-29,4.5400014e-29,4.5264998e-29,4.5130837e-29,4.4997522e-29,4.4865046e-29,4.4733401e-29,4.4602579e-29,4.4472573e-29,4.4343374e-29,4.4214976e-29,4.4087371e-29,4.3960553e-29,4.3834513e-29,4.3709246e-29,4.3584743e-29,4.3460999e-29,4.3338006e-29,4.3215758e-29,4.3094248e-29,4.297347e-29,4.2853418e-29,4.2734084e-29,4.2615463e-29,4.2497549e-29,4.2380335e-29,4.2263816e-29,4.2147986e-29,4.2032838e-29,4.1918367e-29,4.1804568e-29,4.1691434e-29,4.157896e-29,4.1467141e-29,4.1355971e-29,4.1245444e-29,4.1135556e-29,4.1026301e-29,4.0917674e-29,4.080967e-29,4.0702283e-29,4.059551e-29,4.0489344e-29,4.0383781e-29,4.0278817e-29,4.0174446e-29,4.0070663e-29,3.9967465e-29,3.9864846e-29,3.9762802e-29,3.9661329e-29,3.9560421e-29,3.9460075e-29,3.9360286e-29,3.926105e-29,3.9162363e-29,3.9064221e-29,3.8966618e-29,3.8869552e-29,3.8773019e-29,3.8677013e-29,3.8581532e-29,3.8486571e-29,3.8392127e-29,3.8298195e-29,3.8204772e-29,3.8111854e-29,3.8019438e-29,3.7927519e-29,3.7836094e-29,3.774516e-29,3.7654713e-29,3.7564749e-29,3.7475266e-29,3.7386259e-29,3.7297725e-29,3.7209661e-29,3.7122063e-29,3.7034928e-29,3.6948254e-29,3.6862036e-29,3.6776272e-29,3.6690958e-29,3.6606091e-29,3.6521669e-29,3.6437688e-29,3.6354144e-29,3.6271036e-29,3.618836e-29,3.6106114e-29,3.6024293e-29,3.5942896e-29,3.586192e-29,3.5781361e-29,3.5701218e-29,3.5621486e-29,3.5542165e-29,3.546325e-29,3.5384739e-29,3.5306629e-29,3.5228919e-29,3.5151605e-29,3.5074684e-29,3.4998155e-29,3.4922015e-29,3.484626e-29,3.4770889e-29,3.46959e-29,3.4621289e-29,3.4547055e-29,3.4473195e-29,3.4399707e-29,3.4326587e-29,3.4253836e-29,3.4181448e-29,3.4109424e-29,3.4037759e-29,3.3966453e-29,3.3895503e-29,3.3824906e-29,3.3754661e-29,3.3684765e-29,3.3615217e-29,3.3546014e-29,3.3477154e-29,3.3408635e-29,3.3340455e-29,3.3272612e-29,3.3205104e-29,3.3137929e-29,3.3071085e-29,3.300457e-29,3.2938383e-29,3.2872521e-29,3.2806982e-29,3.2741765e-29,3.2676867e-29,3.2612287e-29,3.2548024e-29,3.2484074e-29,3.2420437e-29,3.235711e-29,3.2294093e-29,3.2231382e-29,3.2168977e-29,3.2106876e-29,3.2045076e-29,3.1983577e-29,3.1922377e-29,3.1861473e-29,3.1800865e-29,3.1740551e-29,3.1680529e-29,3.1620797e-29,3.1561354e-29,3.1502199e-29,3.144333e-29,3.1384745e-29,3.1326442e-29,3.1268421e-29,3.121068e-29,3.1153217e-29,3.109603e-29,3.103912e-29,3.0982483e-29,3.0926118e-29,3.0870024e-29,3.0814201e-29,3.0758645e-29,3.0703356e-29,3.0648333e-29,3.0593573e-29,3.0539077e-29,3.0484842e-29,3.0430867e-29,3.037715e-29,3.0323692e-29,3.0270489e-29,3.0217541e-29,3.0164847e-29,3.0112405e-29,3.0060214e-29,3.0008273e-29,2.9956581e-29,2.9905136e-29,2.9853937e-29,2.9802983e-29,2.9752273e-29,2.9701805e-29,2.9651579e-29,2.9601594e-29,2.9551847e-29,2.9502338e-29,2.9453066e-29,2.940403e-29,2.9355228e-29,2.930666e-29,2.9258324e-29,2.921022e-29,2.9162346e-29,2.91147e-29,2.9067283e-29,2.9020093e-29,2.8973129e-29,2.892639e-29,2.8879875e-29,2.8833583e-29,2.8787512e-29,2.8741663e-29,2.8696033e-29,2.8650622e-29,2.8605429e-29,2.8560454e-29,2.8515694e-29,2.8471149e-29,2.8426818e-29,2.83827e-29,2.8338795e-29,2.8295101e-29,2.8251617e-29,2.8208342e-29,2.8165277e-29,2.8122419e-29,2.8079767e-29,2.8037322e-29,2.7995081e-29,2.7953045e-29,2.7911212e-29,2.7869581e-29,2.7828152e-29,2.7786924e-29,2.7745895e-29,2.7705066e-29,2.7664435e-29,2.7624001e-29,2.7583764e-29,2.7543723e-29,2.7503876e-29,2.7464224e-29,2.7424766e-29,2.73855e-29,2.7346426e-29,2.7307544e-29,2.7268851e-29,2.7230349e-29,2.7192035e-29,2.7153909e-29,2.7115971e-29,2.707822e-29,2.7040654e-29,2.7003274e-29,2.6966079e-29,2.6929067e-29,2.6892238e-29,2.6855592e-29,2.6819128e-29,2.6699676e-29,2.6746741e-29,2.6710818e-29,2.6675074e-29,2.6639508e-29,2.6604121e-29,2.656891e-29,2.6533876e-29,2.6499017e-29,2.6464334e-29,2.6429825e-29,2.6395496e-29,2.6361335e-29,2.6327346e-29,2.629353e-29,2.6259884e-29,2.622641e-29,2.6193106e-29,2.6159972e-29,2.6127007e-29,2.6094211e-29,2.6061582e-29,2.6029121e-29,2.5996827e-29,2.5964699e-29,2.5932737e-29,2.590094e-29,2.5869307e-29,2.5837839e-29,2.5806534e-29,2.5775393e-29,2.5744414e-29,2.5713597e-29,2.5682941e-29,2.5652446e-29,2.5622112e-29,2.5591938e-29,2.5561923e-29,2.5532067e-29,2.550237e-29,2.547283e-29,2.5443448e-29,2.5414223e-29,2.5385155e-29,2.5356242e-29,2.5327486e-29,2.5298884e-29,2.5270437e-29,2.5242144e-29,2.5214006e-29,2.518602e-29,2.5158187e-29,2.5130507e-29,2.5102979e-29,2.5075603e-29,2.5048377e-29,2.5021303e-29,2.4994379e-29,2.4967604e-29,2.494098e-29,2.4914504e-29,2.4888177e-29,2.4861999e-29,2.4835968e-29,2.4810085e-29,2.4784349e-29,2.475876e-29,2.4733317e-29,2.4708021e-29,2.468287e-29,2.4657865e-29,2.4633004e-29,2.4608288e-29,2.4583716e-29,2.4559288e-29,2.4535004e-29,2.4510863e-29,2.4486865e-29,2.446301e-29,2.4439296e-29,2.4415725e-29,2.4392295e-29,2.4369006e-29,2.4345859e-29,2.4322852e-29,2.4299985e-29,2.4277259e-29,2.4254672e-29,2.4232225e-29,2.4209916e-29,2.4187747e-29,2.4165716e-29,2.4143824e-29,2.412207e-29,2.4100453e-29,2.4078974e-29,2.4057632e-29,2.4036427e-29,2.4015359e-29,2.3994428e-29,2.3973632e-29,2.3952973e-29,2.3932449e-29,2.3912061e-29,2.3891809e-29,2.3871691e-29,2.3851708e-29,2.383186e-29,2.3812146e-29,2.3792566e-29,2.3773121e-29,2.3753809e-29,2.373463e-29,2.3715585e-29,2.3696674e-29,2.3677895e-29,2.3659249e-29,2.3640736e-29,2.3622355e-29,2.3604106e-29,2.358599e-29,2.3568006e-29,2.3550153e-29,2.3532432e-29,2.3480795e-29,2.3497384e-29,2.3480057e-29,2.3462862e-29,2.3445797e-29,2.3428863e-29,2.3412059e-29,2.3395386e-29,2.3378844e-29,2.3362432e-29,2.334615e-29,2.3329998e-29,2.3313976e-29,2.3298085e-29,2.3282323e-29,2.326669e-29,2.3251188e-29,2.3235815e-29,2.3220571e-29,2.3205457e-29,2.3190473e-29,2.3175617e-29,2.3160891e-29,2.3146294e-29,2.3131827e-29,2.3117488e-29,2.3103279e-29,2.3089199e-29,2.3075247e-29,2.3061425e-29,2.3047732e-29,2.3034168e-29,2.3020732e-29,2.3007426e-29,2.2994249e-29,2.2981201e-29,2.2968282e-29,2.2955492e-29,2.2942831e-29,2.2930299e-29,2.2917896e-29,2.2905623e-29,2.2893478e-29,2.2881464e-29,2.2869578e-29,2.2857822e-29,2.2846196e-29,2.2834699e-29,2.2823331e-29,2.2812094e-29,2.2800987e-29,2.2790009e-29,2.2779162e-29,2.2768444e-29,2.2757858e-29,2.2747401e-29,2.2737075e-29,2.272688e-29,2.2716816e-29,2.2706883e-29,2.2697082e-29,2.2687411e-29,2.2677873e-29,2.2668466e-29,2.2659191e-29,2.2650048e-29,2.2641038e-29,2.263216e-29,2.2623415e-29,2.2614804e-29,2.2606325e-29,2.259798e-29,2.2589769e-29,2.2581693e-29,2.257375e-29,2.2565942e-29,2.255827e-29,2.2550732e-29,2.254333e-29,2.2536065e-29,2.2528935e-29,2.2521942e-29,2.2515086e-29,2.2508367e-29,2.2501786e-29,2.2495344e-29,2.2489039e-29,2.2482874e-29,2.2476848e-29,2.2470962e-29,2.2465216e-29,2.245961e-29,2.2454146e-29,2.2448824e-29,2.2443643e-29,2.2438605e-29,2.2433711e-29,2.242896e-29,2.2424353e-29,2.2419891e-29,2.2415574e-29,2.2411404e-29,2.2407382e-29,2.2403505e-29,2.238467e-29,2.2396195e-29,2.2392764e-29,2.2389482e-29,2.2386351e-29,2.2383371e-29,2.2380543e-29,2.2377868e-29,2.2375346e-29,2.2372979e-29,2.2370767e-29,2.236871e-29,2.2366811e-29,2.2365069e-29,2.2363486e-29,2.2362062e-29,2.2360798e-29,2.2359696e-29,2.2358757e-29,2.235798e-29,2.2357368e-29,2.2356922e-29,2.2356642e-29,2.235653e-29,2.2356586e-29,2.2356812e-29,2.235721e-29,2.235778e-29,2.2358523e-29,2.2359442e-29,2.2360537e-29,2.2361809e-29,2.236326e-29,2.2364892e-29,2.2366705e-29,2.2368702e-29,2.2370883e-29,2.2373251e-29,2.2375807e-29,2.2378552e-29,2.2381489e-29,2.2384619e-29,2.2387944e-29,2.2391466e-29,2.2395186e-29,2.2399106e-29,2.2403229e-29,2.2407557e-29,2.2412091e-29,2.2416833e-29,2.2421787e-29,2.2426953e-29,2.2432335e-29,2.2437935e-29,2.2443755e-29,2.2449798e-29,2.2456066e-29,2.2462561e-29,2.2469288e-29,2.2476248e-29,2.2483444e-29,2.249088e-29,2.2498558e-29,2.2506482e-29,2.2514654e-29,2.2523078e-29,2.2531758e-29,2.2540696e-29,2.2549897e-29,2.2559365e-29,2.2569103e-29,2.2579115e-29,2.2589405e-29,2.2592841e-29,2.2610837e-29,2.2621988e-29,2.2633435e-29,2.2645182e-29,2.2657236e-29,2.26696e-29,2.2682281e-29,2.2695283e-29,2.2708612e-29,2.2722275e-29,2.2736277e-29,2.2750624e-29,2.2765323e-29,2.2780382e-29,2.2795806e-29,2.2811603e-29,2.282778e-29,2.2844346e-29,2.2861307e-29,2.2878674e-29,2.2896454e-29,2.2914656e-29,2.2933291e-29,2.2952367e-29,2.2971895e-29,2.2991886e-29,2.301235e-29,2.30333e-29,2.3054747e-29,2.3076703e-29,2.3099183e-29,2.31222e-29,2.3145768e-29,2.3169901e-29,2.3194617e-29,2.3219931e-29,2.3245861e-29,2.3272424e-29,2.3299641e-29,2.332753e-29,2.3356113e-29,2.3385412e-29,2.341545e-29,2.3446253e-29,2.3477845e-29,2.3510255e-29,2.3543511e-29,2.3577644e-29,2.3612687e-29,2.3648674e-29,2.3685643e-29,2.3723631e-29,2.3762681e-29,2.3802836e-29,2.3844145e-29,2.3886657e-29,2.3930428e-29,2.3975514e-29,2.4021978e-29,2.4069888e-29,2.4119317e-29,2.4170341e-29,2.4223046e-29,2.4277524e-29,2.4333875e-29,2.4392207e-29,2.445264e-29,2.4515304e-29,2.4580341e-29,2.464791e-29,2.4716473e-29,2.479136e-29,2.4867649e-29,2.4947294e-29,2.5030565e-29,2.5117766e-29,2.5209244e-29,2.5305393e-29,2.5406663e-29,2.5513577e-29,2.5626741e-29,2.5746864e-29,2.5874787e-29,2.6011511e-29,2.6158248e-29,2.6316477e-29,2.6488034e-29,2.6675236e-29,2.6881065e-29,2.7109445e-29,2.7365694e-29,2.7657268e-29,2.7995091e-29,2.8396098e-29,2.8888667e-29,2.9526006e-29,3.0427585e-29,3.1974704e-29};

Double_t fTaudSdNuPairValues[999]={1.952216e-25,3.5682858e-26,1.2616287e-26,5.9834016e-27,3.3559246e-27,2.0994773e-27,1.4188225e-27,1.0157381e-27,7.6049412e-28,5.901858e-28,4.7166703e-28,3.862837e-28,3.2296029e-28,2.7482236e-28,2.3744001e-28,2.0786559e-28,1.8408249e-28,1.646771e-28,1.4863706e-28,1.3522334e-28,1.2388721e-28,1.1421486e-28,1.0588988e-28,9.8667194e-29,9.2354821e-29,8.6800714e-29,8.1883277e-29,7.7504378e-29,7.3584152e-29,7.0057083e-29,6.6869036e-29,6.3974971e-29,6.1337174e-29,5.8923873e-29,5.6708152e-29,5.4667084e-29,5.2781044e-29,5.103315e-29,4.9408816e-29,4.7895384e-29,4.6481825e-29,4.5158493e-29,4.3916917e-29,4.2749636e-29,4.1650055e-29,4.0612322e-29,3.9631234e-29,3.870215e-29,3.7820914e-29,3.6983801e-29,3.6187459e-29,3.5428866e-29,3.4705292e-29,3.4014261e-29,3.3353527e-29,3.2721047e-29,3.2114957e-29,3.1533556e-29,3.0975286e-29,3.0438718e-29,2.9922541e-29,2.9425547e-29,2.8946625e-29,2.8484748e-29,2.8038966e-29,2.7608401e-29,2.7192237e-29,2.6789719e-29,2.6400142e-29,2.6022853e-29,2.5657239e-29,2.5302732e-29,2.49588e-29,2.4624943e-29,2.4300697e-29,2.3985623e-29,2.3679312e-29,2.3381377e-29,2.3091455e-29,2.2809207e-29,2.2534309e-29,2.2266459e-29,2.200537e-29,2.1750772e-29,2.1502409e-29,2.1260038e-29,2.102343e-29,2.0792369e-29,2.0566648e-29,2.034607e-29,2.0130451e-29,1.9919614e-29,1.9713389e-29,1.9511618e-29,1.9314148e-29,1.9120834e-29,1.8931536e-29,1.8746123e-29,1.8564469e-29,1.8386452e-29,1.8211958e-29,1.8040875e-29,1.7873099e-29,1.7708529e-29,1.7547067e-29,1.738862e-29,1.72331e-29,1.7080421e-29,1.6930502e-29,1.6783263e-29,1.6638628e-29,1.6496526e-29,1.6356886e-29,1.621964e-29,1.6084725e-29,1.5952077e-29,1.5821637e-29,1.5693347e-29,1.5567151e-29,1.5442995e-29,1.5320828e-29,1.5200599e-29,1.508226e-29,1.4965764e-29,1.4851066e-29,1.4738124e-29,1.4626894e-29,1.4517335e-29,1.440941e-29,1.4303078e-29,1.4198304e-29,1.4095052e-29,1.3993287e-29,1.3892976e-29,1.3794086e-29,1.3696586e-29,1.3600444e-29,1.3505633e-29,1.3412123e-29,1.3319886e-29,1.3228894e-29,1.3139123e-29,1.3050547e-29,1.2963139e-29,1.2876878e-29,1.2791739e-29,1.2707699e-29,1.2624737e-29,1.2542831e-29,1.246196e-29,1.2382105e-29,1.2303244e-29,1.2225359e-29,1.2148431e-29,1.2072443e-29,1.1997375e-29,1.1923212e-29,1.1849936e-29,1.177753e-29,1.1705979e-29,1.1635268e-29,1.156538e-29,1.1496301e-29,1.1428018e-29,1.1360514e-29,1.1293778e-29,1.1227795e-29,1.1162553e-29,1.1098038e-29,1.1034238e-29,1.0971141e-29,1.0908736e-29,1.0847009e-29,1.0785951e-29,1.072555e-29,1.0665795e-29,1.0606675e-29,1.0548181e-29,1.0490301e-29,1.0433027e-29,1.0376348e-29,1.0320256e-29,1.026474e-29,1.0209792e-29,1.0155403e-29,1.0066214e-29,1.0013513e-29,9.9613319e-30,9.9096643e-30,9.8915432e-30,9.8403316e-30,9.7896218e-30,9.7394065e-30,9.6896782e-30,9.6404299e-30,9.5916545e-30,9.5433451e-30,9.495495e-30,9.4480975e-30,9.4011461e-30,9.3546346e-30,9.3085567e-30,9.2629062e-30,9.2176772e-30,9.1728638e-30,9.1284602e-30,9.0844608e-30,9.0408601e-30,8.9976525e-30,8.9548327e-30,8.9123956e-30,8.8703359e-30,8.8286486e-30,8.7873288e-30,8.7463716e-30,8.7057722e-30,8.6655259e-30,8.6256281e-30,8.5860743e-30,8.5468601e-30,8.507981e-30,8.4694329e-30,8.4312114e-30,8.3933125e-30,8.355732e-30,8.3184661e-30,8.2815106e-30,8.2448619e-30,8.2085161e-30,8.1724695e-30,8.1367183e-30,8.1012591e-30,8.0660882e-30,8.0312022e-30,7.9965976e-30,7.9622711e-30,7.9282193e-30,7.8944391e-30,7.8609272e-30,7.8276804e-30,7.7946955e-30,7.7619697e-30,7.7294999e-30,7.697283e-30,7.6653162e-30,7.6335967e-30,7.6021216e-30,7.5708881e-30,7.5398935e-30,7.4963708e-30,7.4660121e-30,7.4358817e-30,7.4059772e-30,7.376296e-30,7.3468357e-30,7.3175938e-30,7.2885681e-30,7.2597561e-30,7.2311556e-30,7.2027644e-30,7.1856536e-30,7.1575343e-30,7.1296196e-30,7.1019076e-30,7.074396e-30,7.0470827e-30,7.0199657e-30,6.9930428e-30,6.966312e-30,6.9397714e-30,6.913419e-30,6.8872529e-30,6.8612711e-30,6.8354718e-30,6.809853e-30,6.7844131e-30,6.7591501e-30,6.7340623e-30,6.709148e-30,6.6844053e-30,6.6598326e-30,6.6354282e-30,6.6111906e-30,6.5871179e-30,6.5632086e-30,6.539461e-30,6.5158738e-30,6.4924451e-30,6.4691736e-30,6.4460578e-30,6.423096e-30,6.400287e-30,6.3776292e-30,6.3551211e-30,6.3327614e-30,6.3105487e-30,6.2884815e-30,6.2665586e-30,6.2447785e-30,6.22314e-30,6.2016418e-30,6.1802825e-30,6.1590609e-30,6.1379757e-30,6.1170257e-30,6.0962096e-30,6.0755263e-30,6.0549745e-30,6.0345531e-30,6.0142608e-30,5.9940966e-30,5.9740592e-30,5.9541477e-30,5.9343607e-30,5.9146974e-30,5.8951565e-30,5.875737e-30,5.8564378e-30,5.8372579e-30,5.8181963e-30,5.7992519e-30,5.7804238e-30,5.7617108e-30,5.7431121e-30,5.7246267e-30,5.7062535e-30,5.6879918e-30,5.6698404e-30,5.6517986e-30,5.6338653e-30,5.6113825e-30,5.5937115e-30,5.5761458e-30,5.5586844e-30,5.5413267e-30,5.5240717e-30,5.5069185e-30,5.4898663e-30,5.4729144e-30,5.4560619e-30,5.439308e-30,5.422652e-30,5.4060929e-30,5.3896301e-30,5.3732628e-30,5.3569902e-30,5.3408116e-30,5.3247262e-30,5.3087333e-30,5.2928322e-30,5.2770222e-30,5.2613025e-30,5.2456724e-30,5.2301313e-30,5.2183327e-30,5.2029315e-30,5.1876177e-30,5.1723905e-30,5.1572493e-30,5.1421934e-30,5.1272222e-30,5.112335e-30,5.0975312e-30,5.0828102e-30,5.0681714e-30,5.053614e-30,5.0391376e-30,5.0247414e-30,5.010425e-30,4.9961877e-30,4.982029e-30,4.9679482e-30,4.9539447e-30,4.9400181e-30,4.9261677e-30,4.9123929e-30,4.8986934e-30,4.8850685e-30,4.8715175e-30,4.8580402e-30,4.8446357e-30,4.8313038e-30,4.8180438e-30,4.8048553e-30,4.7917376e-30,4.7786904e-30,4.7657131e-30,4.7528053e-30,4.7399663e-30,4.7271959e-30,4.7144934e-30,4.7018584e-30,4.6892904e-30,4.6767891e-30,4.6643538e-30,4.6519841e-30,4.6396797e-30,4.62744e-30,4.6152646e-30,4.6031531e-30,4.591105e-30,4.5791199e-30,4.5671975e-30,4.5553371e-30,4.5435385e-30,4.5318011e-30,4.5201247e-30,4.5085088e-30,4.496953e-30,4.4854569e-30,4.4740201e-30,4.4626422e-30,4.4513228e-30,4.4400615e-30,4.428858e-30,4.4177119e-30,4.4066228e-30,4.3955903e-30,4.384614e-30,4.3736937e-30,4.3628288e-30,4.3520193e-30,4.3412644e-30,4.3305641e-30,4.3181123e-30,4.3075351e-30,4.2970111e-30,4.2865401e-30,4.2761217e-30,4.2657556e-30,4.2554414e-30,4.2451789e-30,4.2349677e-30,4.2248074e-30,4.2146979e-30,4.2046387e-30,4.1946295e-30,4.1846701e-30,4.1747601e-30,4.1648993e-30,4.1550873e-30,4.1453238e-30,4.1356085e-30,4.1259412e-30,4.1163215e-30,4.1067491e-30,4.0972239e-30,4.0877455e-30,4.0783135e-30,4.0689278e-30,4.0595881e-30,4.050294e-30,4.0410454e-30,4.0318419e-30,4.0226832e-30,4.0135692e-30,4.0044995e-30,3.9954739e-30,3.9864922e-30,3.977554e-30,3.9686591e-30,3.9598074e-30,3.9509984e-30,3.942232e-30,3.9335079e-30,3.9248259e-30,3.9161858e-30,3.9075873e-30,3.8990301e-30,3.890514e-30,3.8820389e-30,3.8736044e-30,3.8652103e-30,3.8568564e-30,3.8485426e-30,3.8402685e-30,3.8332141e-30,3.8250096e-30,3.8168441e-30,3.8087177e-30,3.8006299e-30,3.7925807e-30,3.7845699e-30,3.776597e-30,3.7686622e-30,3.760765e-30,3.7529052e-30,3.7450828e-30,3.7372973e-30,3.7295488e-30,3.721837e-30,3.7141616e-30,3.7065225e-30,3.6989195e-30,3.6913523e-30,3.6838208e-30,3.6763249e-30,3.6688642e-30,3.6614387e-30,3.6540481e-30,3.6466922e-30,3.639371e-30,3.6320841e-30,3.6248314e-30,3.6176129e-30,3.610428e-30,3.6032769e-30,3.5961593e-30,3.589075e-30,3.5820238e-30,3.5750056e-30,3.5680202e-30,3.5610675e-30,3.5541473e-30,3.5472594e-30,3.5404035e-30,3.5335797e-30,3.5267877e-30,3.5200274e-30,3.5132985e-30,3.506601e-30,3.4999347e-30,3.4932994e-30,3.4866949e-30,3.4801212e-30,3.473578e-30,3.4670652e-30,3.4598328e-30,3.4533857e-30,3.4469687e-30,3.4405814e-30,3.4342237e-30,3.4278955e-30,3.4215966e-30,3.4153269e-30,3.4090863e-30,3.4028745e-30,3.3966916e-30,3.3905373e-30,3.3844115e-30,3.3783139e-30,3.3722447e-30,3.3662036e-30,3.3601904e-30,3.354205e-30,3.3482473e-30,3.3423171e-30,3.3364145e-30,3.3305391e-30,3.3246908e-30,3.3188697e-30,3.3130753e-30,3.3073079e-30,3.3015671e-30,3.2958528e-30,3.290165e-30,3.2845035e-30,3.278868e-30,3.2732588e-30,3.2676755e-30,3.2621179e-30,3.2565861e-30,3.2510798e-30,3.2455991e-30,3.2401437e-30,3.2347136e-30,3.2293086e-30,3.2239286e-30,3.2185735e-30,3.2132432e-30,3.2079376e-30,3.2026565e-30,3.1974e-30,3.1921678e-30,3.1869598e-30,3.181776e-30,3.1766163e-30,3.1714805e-30,3.1663685e-30,3.1612802e-30,3.1562157e-30,3.1511745e-30,3.1461569e-30,3.1411625e-30,3.1361913e-30,3.1312433e-30,3.1263184e-30,3.1214163e-30,3.1165371e-30,3.1116806e-30,3.1068467e-30,3.1020355e-30,3.0972466e-30,3.0924801e-30,3.0877359e-30,3.0830139e-30,3.0783138e-30,3.0736359e-30,3.0689798e-30,3.0643456e-30,3.0597329e-30,3.055142e-30,3.0505726e-30,3.0460247e-30,3.0414982e-30,3.0369928e-30,3.0325087e-30,3.0280458e-30,3.0236039e-30,3.0191829e-30,3.0147827e-30,3.0104034e-30,3.0060447e-30,3.0017067e-30,2.9973892e-30,2.9930921e-30,2.9888154e-30,2.984559e-30,2.980718e-30,2.9764992e-30,2.9723005e-30,2.9681218e-30,2.9639631e-30,2.9598242e-30,2.955705e-30,2.9516056e-30,2.9475258e-30,2.9434655e-30,2.9394248e-30,2.9354033e-30,2.9314013e-30,2.9274185e-30,2.9231196e-30,2.9191773e-30,2.9152541e-30,2.9113498e-30,2.9074645e-30,2.9035979e-30,2.8997501e-30,2.895921e-30,2.8921105e-30,2.8883186e-30,2.8845452e-30,2.8807901e-30,2.8770535e-30,2.8733352e-30,2.869635e-30,2.8659531e-30,2.8622892e-30,2.8586434e-30,2.8550155e-30,2.8514056e-30,2.8478136e-30,2.8442392e-30,2.8406827e-30,2.8371439e-30,2.8336226e-30,2.8301188e-30,2.8266327e-30,2.8231639e-30,2.8197125e-30,2.8162784e-30,2.8128616e-30,2.809462e-30,2.8060795e-30,2.8027142e-30,2.7993658e-30,2.7960345e-30,2.7927201e-30,2.7894225e-30,2.7861418e-30,2.7828779e-30,2.7796306e-30,2.7764001e-30,2.7731861e-30,2.7699888e-30,2.7668079e-30,2.7636435e-30,2.7604954e-30,2.7573638e-30,2.7542484e-30,2.7511493e-30,2.7480665e-30,2.7449997e-30,2.7419491e-30,2.7389145e-30,2.7358961e-30,2.7328936e-30,2.729907e-30,2.7269362e-30,2.7239813e-30,2.7210422e-30,2.7181189e-30,2.7152112e-30,2.7123192e-30,2.7094428e-30,2.7065821e-30,2.7037368e-30,2.700907e-30,2.6980926e-30,2.6952937e-30,2.6925101e-30,2.6897419e-30,2.6869889e-30,2.6842513e-30,2.6815287e-30,2.6788214e-30,2.6761291e-30,2.673452e-30,2.6707899e-30,2.6681428e-30,2.6655107e-30,2.6628935e-30,2.6602913e-30,2.6577039e-30,2.6551313e-30,2.6525736e-30,2.6500305e-30,2.6475022e-30,2.6449886e-30,2.6424897e-30,2.6400053e-30,2.6375356e-30,2.6350804e-30,2.6326398e-30,2.6302137e-30,2.627802e-30,2.6254047e-30,2.6230219e-30,2.6206534e-30,2.6182993e-30,2.6159595e-30,2.613634e-30,2.6113227e-30,2.6090257e-30,2.6067428e-30,2.6044741e-30,2.6022196e-30,2.5999792e-30,2.5977529e-30,2.5955407e-30,2.5933425e-30,2.5911583e-30,2.5889882e-30,2.5868319e-30,2.5846897e-30,2.5825613e-30,2.5804469e-30,2.5783463e-30,2.5762597e-30,2.5741868e-30,2.5721277e-30,2.5700825e-30,2.568051e-30,2.5660428e-30,2.5640387e-30,2.5620483e-30,2.5600717e-30,2.5581086e-30,2.5561593e-30,2.5542236e-30,2.5523014e-30,2.550393e-30,2.5484983e-30,2.5466169e-30,2.5447492e-30,2.542895e-30,2.5410544e-30,2.5392273e-30,2.5374138e-30,2.5356137e-30,2.5338272e-30,2.5320541e-30,2.5302944e-30,2.5285483e-30,2.5268156e-30,2.5250964e-30,2.5233905e-30,2.5216981e-30,2.5200191e-30,2.5183535e-30,2.5167014e-30,2.5150626e-30,2.5134372e-30,2.5118252e-30,2.5102266e-30,2.5086414e-30,2.5070695e-30,2.5055111e-30,2.503966e-30,2.5024342e-30,2.5009159e-30,2.4994109e-30,2.4979193e-30,2.496441e-30,2.4949762e-30,2.4935247e-30,2.4920866e-30,2.490662e-30,2.4892506e-30,2.4878527e-30,2.4864682e-30,2.4850971e-30,2.4837394e-30,2.4823951e-30,2.4810643e-30,2.479747e-30,2.4784431e-30,2.4771527e-30,2.4758756e-30,2.4746121e-30,2.4733622e-30,2.4721257e-30,2.4709029e-30,2.4696935e-30,2.4684977e-30,2.4673156e-30,2.4661469e-30,2.464992e-30,2.4638507e-30,2.4627231e-30,2.4616092e-30,2.4605089e-30,2.4594225e-30,2.4583499e-30,2.457291e-30,2.4562459e-30,2.4552148e-30,2.4541973e-30,2.453194e-30,2.4522046e-30,2.4512291e-30,2.4502677e-30,2.4493203e-30,2.4483871e-30,2.4474679e-30,2.446563e-30,2.4456722e-30,2.4447958e-30,2.4439336e-30,2.4430857e-30,2.4422524e-30,2.4414333e-30,2.440629e-30,2.439839e-30,2.4390637e-30,2.438303e-30,2.4375571e-30,2.436826e-30,2.4361097e-30,2.4354082e-30,2.434722e-30,2.4340504e-30,2.4333942e-30,2.432753e-30,2.4321272e-30,2.4315206e-30,2.4309253e-30,2.4303456e-30,2.4297815e-30,2.4292329e-30,2.4287001e-30,2.4281831e-30,2.427682e-30,2.427197e-30,2.4267281e-30,2.4262753e-30,2.4258388e-30,2.4254188e-30,2.4250153e-30,2.4246284e-30,2.4242583e-30,2.4239051e-30,2.4235688e-30,2.4232496e-30,2.4229477e-30,2.4226632e-30,2.4223962e-30,2.4221469e-30,2.4219153e-30,2.4217017e-30,2.4215063e-30,2.421329e-30,2.4211702e-30,2.42103e-30,2.4209086e-30,2.4208061e-30,2.4207228e-30,2.4206587e-30,2.4206142e-30,2.4205894e-30,2.4205845e-30,2.4205998e-30,2.4206354e-30,2.4206916e-30,2.4207688e-30,2.4208669e-30,2.4209863e-30,2.4211273e-30,2.4212902e-30,2.4214751e-30,2.4216825e-30,2.4219126e-30,2.4221656e-30,2.4224421e-30,2.4227422e-30,2.4230662e-30,2.4234146e-30,2.4237876e-30,2.4241858e-30,2.4246093e-30,2.4250588e-30,2.4255345e-30,2.4260369e-30,2.4265664e-30,2.4271235e-30,2.4277087e-30,2.4283226e-30,2.4289654e-30,2.429638e-30,2.4303406e-30,2.4310758e-30,2.4318407e-30,2.4326376e-30,2.433467e-30,2.4343298e-30,2.4352266e-30,2.4361583e-30,2.4371255e-30,2.4381291e-30,2.43917e-30,2.4402488e-30,2.4413668e-30,2.4425246e-30,2.4437235e-30,2.4449644e-30,2.4462484e-30,2.4475767e-30,2.4489506e-30,2.4503712e-30,2.4518399e-30,2.4533582e-30,2.4549275e-30,2.4565495e-30,2.4582258e-30,2.4599579e-30,2.4617481e-30,2.4635979e-30,2.4655097e-30,2.4674856e-30,2.4695278e-30,2.4716388e-30,2.4738214e-30,2.4760783e-30,2.4784124e-30,2.480827e-30,2.4833256e-30,2.4859116e-30,2.4885899e-30,2.4913629e-30,2.4942361e-30,2.4972144e-30,2.5003031e-30,2.5035078e-30,2.5068348e-30,2.5102908e-30,2.5138831e-30,2.5176198e-30,2.5215097e-30,2.5255624e-30,2.5297886e-30,2.5342001e-30,2.5388097e-30,2.5436323e-30,2.5486841e-30,2.5539831e-30,2.5595501e-30,2.5654084e-30,2.571585e-30,2.5781096e-30,2.5850177e-30,2.5923504e-30,2.6001555e-30,2.60849e-30,2.6174214e-30,2.6270314e-30,2.6374199e-30,2.6487112e-30,2.6610616e-30,2.6746725e-30,2.6898087e-30,2.7068296e-30,2.7262387e-30,2.7487734e-30,2.7755776e-30,2.8085669e-30,2.8513333e-30,2.9119406e-30,3.0161091e-30};

Double_t fOneOverBetasMuon[200];
Double_t fOneOverBetasTau[200];
Double_t fEnergyMuon[200];
Double_t fEnergyTau[200];


Int_t fOneOverCELNumPoints=150;
Double_t fOneOverCELEnergy[150]={1e+07,1.1e+07,1.21e+07,1.331e+07,1.4641e+07,1.61051e+07,1.77156e+07,1.94872e+07,2.14359e+07,2.35795e+07,2.59374e+07,2.85312e+07,3.13843e+07,3.45227e+07,3.7975e+07,4.17725e+07,4.59497e+07,5.05447e+07,5.55992e+07,6.11591e+07,6.7275e+07,7.40025e+07,8.14027e+07,8.9543e+07,9.84973e+07,1e+08,1.1e+08,1.21e+08,1.331e+08,1.4641e+08,1.61051e+08,1.77156e+08,1.94872e+08,2.14359e+08,2.35795e+08,2.59374e+08,2.85312e+08,3.13843e+08,3.45227e+08,3.7975e+08,4.17725e+08,4.59497e+08,5.05447e+08,5.55992e+08,6.11591e+08,6.7275e+08,7.40025e+08,8.14027e+08,8.9543e+08,9.84973e+08,1e+09,1.1e+09,1.21e+09,1.331e+09,1.4641e+09,1.61051e+09,1.77156e+09,1.94872e+09,2.14359e+09,2.35795e+09,2.59374e+09,2.85312e+09,3.13843e+09,3.45227e+09,3.7975e+09,4.17725e+09,4.59497e+09,5.05447e+09,5.55992e+09,6.11591e+09,6.7275e+09,7.40025e+09,8.14027e+09,8.9543e+09,9.84973e+09,1e+10,1.1e+10,1.21e+10,1.331e+10,1.4641e+10,1.61051e+10,1.77156e+10,1.94872e+10,2.14359e+10,2.35795e+10,2.59374e+10,2.85312e+10,3.13843e+10,3.45227e+10,3.7975e+10,4.17725e+10,4.59497e+10,5.05447e+10,5.55992e+10,6.11591e+10,6.7275e+10,7.40025e+10,8.14027e+10,8.9543e+10,9.84973e+10,1e+11,1.1e+11,1.21e+11,1.331e+11,1.4641e+11,1.61051e+11,1.77156e+11,1.94872e+11,2.14359e+11,2.35795e+11,2.59374e+11,2.85312e+11,3.13843e+11,3.45227e+11,3.7975e+11,4.17725e+11,4.59497e+11,5.05447e+11,5.55992e+11,6.11591e+11,6.7275e+11,7.40025e+11,8.14027e+11,8.9543e+11,9.84973e+11,1e+12,1.1e+12,1.21e+12,1.331e+12,1.4641e+12,1.61051e+12,1.77156e+12,1.94872e+12,2.14359e+12,2.35795e+12,2.59374e+12,2.85312e+12,3.13843e+12,3.45227e+12,3.7975e+12,4.17725e+12,4.59497e+12,5.05447e+12,5.55992e+12,6.11591e+12,6.7275e+12,7.40025e+12,8.14027e+12,8.9543e+12,9.84973e+12};


Double_t fOneOverCELMuon[150]={0.592547,0.538549,0.489469,0.444862,0.404318,0.367469,0.333978,0.303538,0.275871,0.250726,0.227873,0.207102,0.188223,0.171066,0.155472,0.141299,0.128418,0.116711,0.106071,0.0964008,0.087612,0.0796244,0.0723649,0.0657671,0.0597708,0.0588699,0.0534954,0.0486114,0.0441733,0.0401403,0.0364754,0.0331451,0.0301189,0.0273689,0.02487,0.0225992,0.0205357,0.0186606,0.0169567,0.0154084,0.0140014,0.0127229,0.0115611,0.0105054,0.00954609,0.00867437,0.00788225,0.00716246,0.00650839,0.00591404,0.00582475,0.00529283,0.00480948,0.00437027,0.00397116,0.0036085,0.00327896,0.00297951,0.0027074,0.00246015,0.00223547,0.00203131,0.00184579,0.00167722,0.00152404,0.00138485,0.00125837,0.00114345,0.00103901,0.00094412,0.000857892,0.000779538,0.000708341,0.000643646,0.00058486,0.000576029,0.000523418,0.000475612,0.000432172,0.0003927,0.000356833,0.000324241,0.000294626,0.000267716,0.000243264,0.000221045,0.000200855,0.00018251,0.00016584,0.000150692,0.000136929,0.000124422,0.000113057,0.000102731,9.33474e-05,8.48211e-05,7.70736e-05,7.00337e-05,6.36368e-05,5.78242e-05,5.6951e-05,5.17491e-05,4.70223e-05,4.27273e-05,3.88245e-05,3.52782e-05,3.20559e-05,2.91278e-05,2.64672e-05,2.40497e-05,2.18529e-05,1.98568e-05,1.8043e-05,1.63949e-05,1.48974e-05,1.35366e-05,1.23001e-05,1.11766e-05,1.01557e-05,9.22801e-06,8.38509e-06,7.61916e-06,6.92319e-06,6.29079e-06,5.71616e-06,5.62983e-06,5.11557e-06,4.64829e-06,4.22369e-06,3.83787e-06,3.48729e-06,3.16874e-06,2.87929e-06,2.61627e-06,2.37728e-06,2.16013e-06,1.9628e-06,1.78351e-06,1.62059e-06,1.47255e-06,1.33803e-06,1.2158e-06,1.10474e-06,1.00382e-06,9.12125e-07,8.28802e-07,7.53091e-07,6.84295e-07,6.21784e-07,5.64984e-07};


Double_t fOneOverCELTau[150]={2.75038,2.49839,2.26947,2.06151,1.87259,1.70097,1.54506,1.40344,1.27478,1.15791,1.05175,0.955315,0.867715,0.788143,0.715862,0.650206,0.590569,0.536397,0.487192,0.442498,0.401902,0.365028,0.331535,0.301114,0.273483,0.269333,0.244514,0.22198,0.201523,0.18295,0.166088,0.15078,0.136883,0.124266,0.112811,0.102412,0.0929717,0.0844011,0.0766205,0.0695569,0.0631444,0.0573229,0.052038,0.0472403,0.0428848,0.0389308,0.0353413,0.0320827,0.0291246,0.0264391,0.0260359,0.0236352,0.0214558,0.0194774,0.0176814,0.0160509,0.0145708,0.0132272,0.0120075,0.0109002,0.00989503,0.00898255,0.0081542,0.00740225,0.00671963,0.00609995,0.00553742,0.00502677,0.0045632,0.00414239,0.00376038,0.0034136,0.0030988,0.00281302,0.00255361,0.00251466,0.00228276,0.00207224,0.00188114,0.00170766,0.00155018,0.00140722,0.00127745,0.00115965,0.00105271,0.000955626,0.0008675,0.000787501,0.000714879,0.000648955,0.000589111,0.000534785,0.000485469,0.000440701,0.000400062,0.00036317,0.000329681,0.00029928,0.000271682,0.000246629,0.000242868,0.000220473,0.000200142,0.000181687,0.000164933,0.000149725,0.000135919,0.000123386,0.000112009,0.00010168,9.23047e-05,8.37935e-05,7.60672e-05,6.90533e-05,6.26862e-05,5.69062e-05,5.16592e-05,4.6896e-05,4.2572e-05,3.86468e-05,3.50834e-05,3.18487e-05,2.89122e-05,2.62464e-05,2.38265e-05,2.34632e-05,2.12999e-05,1.9336e-05,1.75533e-05,1.59349e-05,1.44657e-05,1.3132e-05,1.19213e-05,1.08222e-05,9.8244e-06,8.91862e-06,8.09637e-06,7.34992e-06,6.67229e-06,6.05714e-06,5.49871e-06,4.99176e-06,4.53155e-06,4.11377e-06,3.73451e-06,3.39022e-06,3.07767e-06,2.79393e-06,2.53635e-06,2.30252e-06};





Double_t getdEdXCombined(Double_t *energy, Double_t *par)
{
//    Double_t density=par[3];
    return energy[0]*getBetaCombined(energy,par);
}


Double_t getBetaCombined(Double_t *energy, Double_t *par)
{
    Double_t isATau=par[0];
    Double_t A=par[1];
    Double_t Z=par[2]; 
    Double_t leptonMass=muonMass;
    if(int(isATau+0.1)) {
	leptonMass=tauMass;
    }  
    Double_t nuMin=getPairNuMin(energy[0]);    
    Double_t nuMax=getPairNuMax(energy[0],leptonMass,Z);
    TF1 tempPairy("tempPairy",funcPairnudSdnu,0,nuMax,4);
    tempPairy.SetParameters(energy[0],isATau,A,Z);
    Double_t pairIntegral=tempPairy.Integral(0,nuMax);
   
    nuMin=0;
    nuMax=1;
    TF1 tempPhotoy("tempPhotoy",funcPhotonudSdnu,nuMin,nuMax,4);
    tempPhotoy.SetParameters(energy[0],isATau,A,Z);
    Double_t photoIntegral=tempPhotoy.Integral(0,1);

    nuMin=0;
    nuMax=getBremNuMax(energy[0],leptonMass,Z);
    TF1 tempBremy("tempBremy",funcBremnudSdnu,0,nuMax,4);
    tempBremy.SetParameters(energy[0],isATau,A,Z);
    Double_t bremIntegral=tempBremy.Integral(0,nuMax);

    Double_t integral=pairIntegral+photoIntegral+bremIntegral;
    return integral*Avogadro/(A*1e-6);
}


void pairPlot() 
{
//    plotPairAsFunctionOfNu();
   plotPairBetaAsFunctionOfEnergy();
}

void plotPairBetaAsFunctionOfEnergy() 
{
    TF1 *plotty = new TF1("plotty",getBetaForPair,100,1e13,3);
    plotty->SetParameters(0,22,11);
    plotty->Draw();

}

Double_t getBetaForPair(Double_t *energy, Double_t *par)
{
    Double_t isATau=par[0];
    Double_t A=par[1];
    Double_t Z=par[2]; 
    Double_t leptonMass=muonMass;
    if(int(isATau+0.1)) {
	leptonMass=tauMass;
    }     
    Double_t nuMin=getPairNuMin(energy[0]);     
    Double_t nuMax=getPairNuMax(energy[0],leptonMass,Z);
    TF1 temppy("temppy",funcPairnudSdnu,nuMin,nuMax,4);
    temppy.SetParameters(energy[0],isATau,A,Z);
    Double_t integral=temppy.Integral(nuMin,nuMax);
    return integral*Avogadro/(A*1e-6);
}

Double_t getPairNuMin(Double_t energy)
{
    return 4*electronMass/energy;
}

Double_t getPairNuMax(Double_t energy,Double_t leptonMass, Double_t Z)
{
    return 1-
	(0.75*TMath::Sqrt(TMath::Exp(1))*TMath::Power(Z,1./3.)*
	 (leptonMass/energy));
}



Double_t pairdSdnu(Double_t energy, Double_t nu, Double_t leptonMass, Double_t Z)
{
    Double_t Zto13=TMath::Power(Z,1./3.);
    Double_t zeta=TMath::Sqrt(1+((4.*Zto13/1.9)*
				 (muonMass*muonMass/(leptonMass*leptonMass))));
    Double_t re=classic_electr_radius;
    Double_t rhoMin=0;
    Double_t rhoMax=(1-(6*leptonMass*leptonMass)/(energy*energy*(1-nu)))*
	TMath::Sqrt(1-(4*electronMass/(energy*nu)));
//    cout << rhoMax << endl;
    static TF1 *tempRho;
    static int doneInit=0;
    if(!doneInit) {
	tempRho= new TF1("tempRho",funcPairRhoPart,0,1,4);
	doneInit=1;
    }
        
    tempRho->SetParameters(energy,nu,leptonMass,Z);
    Double_t integral=tempRho->Integral(rhoMin,rhoMax);
   
    Double_t outside=(2/(3*pi*nu))*alpha*alpha*re*re*Z*(Z+zeta)*(1-nu);
//    cout << outside << "\t" << integral << endl;
    return outside*integral; //already has the extra nu factor   
}

Double_t funcPairRhoPart(Double_t *rho, Double_t *par) 
{
    Double_t energy=par[0];
    Double_t nu=par[1];
    Double_t leptonMass=par[2];
    Double_t Z=par[3];
    return pairRhoPart(rho[0],energy,nu,leptonMass,Z);
}


Double_t pairRhoPart(Double_t rho, Double_t energy, Double_t nu, Double_t leptonMass, Double_t Z)
{
    Double_t ml=leptonMass;
    Double_t me=electronMass;
    Double_t rhoSqd=rho*rho;
    Double_t Zto13=TMath::Power(Z,1./3.);
    Double_t Zto23=TMath::Power(Z,2./3.);
    Double_t sqrtE=TMath::Sqrt(TMath::Exp(1));
    Double_t beta=(nu*nu)/(2*(1-nu));
    Double_t R=183; //For now

    Double_t xi=TMath::Power(ml*nu/(2*me),2)*(1-rho*rho)/(1-nu);
    Double_t Y_l=(4+rhoSqd+3*beta*(1+rhoSqd))/
	((1+rhoSqd)*(1.5+2*beta)*TMath::Log(3+xi)+1-1.5*rhoSqd);
    Double_t Y_e=(5-rhoSqd+4*beta*(1+rhoSqd))/
	(2*(1+3*beta)*TMath::Log(3+1./xi)-rhoSqd-2*beta*(2-rhoSqd));
    Double_t L_l=TMath::Log((2*ml*R/(3*me*Zto23))/
			    (1+(2*me*sqrtE*R*(1+xi)*(1+Y_l))/
			     (Zto13*energy*nu*(1-rhoSqd))));
    Double_t term=(1+xi)*(1+Y_e);
    Double_t L_e=TMath::Log(R*TMath::Sqrt(term)/
			    Zto13+(2*me*sqrtE*R*term)/(energy*nu*(1-rhoSqd)))-
	0.5*TMath::Log(1+TMath::Power(1.5*Zto13*(me/ml),2)*term);
    Double_t Phi_l=(((1+rhoSqd)*(1+1.5*beta)-
		   (1./xi)*(1-rhoSqd)*(1+2*beta))*TMath::Log(1+xi)+
		  (xi*(1-rhoSqd-beta)/(1+xi))-(1-rhoSqd)*(1+2*beta))*L_l;
  
    Double_t Phi_e=(((2+rhoSqd)*(1+beta)+xi*(3+rhoSqd))*TMath::Log(1+1./xi)+
		    ((1-rhoSqd-beta)/(1+xi))-(3+rhoSqd))*L_e;
    
    return Phi_e+(me/ml)*Phi_l;   
}



Double_t getBetaFromFulldSdnu(Double_t *energy, Double_t *par)
{
    Double_t isATau=par[0];
    Double_t A=par[1];
    Double_t Z=par[2];
    TF1 temppy("temppy",funcPhotonudSdnu,0,1,4);
    temppy.SetParameters(energy[0],isATau,A,Z);
    Double_t integral=temppy.Integral(0,1);
    return integral*Avogadro/(A*1e-6);
}


void plotAsFunctionOfNu() 
{
    Int_t myColours[8]={50,40,30,9,8,38,42,12};
    Double_t myEnergies[8]={1e9,3e9,1e10,3e10,1e11,3e11,1e12,3e12};
    
    TCanvas *can = new TCanvas("can","can");
    can->SetLogx();
    TF1 *plotty = new TF1("plotty",funcPhotonudSdnu,1e-6,1,4);
    plotty->SetTitle("Muon");
    plotty->SetLineColor(myColours[7]);
    plotty->SetParameters(myEnergies[7],0,22,11);
    plotty->DrawCopy();
    plotty->GetXaxis()->SetTitle("#nu");
    plotty->GetYaxis()->SetTitle("#nu d#{sigma}/d#{nu} (#{mu}b)");				
    for(int i=6;i>=0;i--) {
	plotty->SetLineColor(myColours[i]);
	plotty->SetParameter(0,myEnergies[i]);
//	plotty->SetParameter(0,tauMass);
	plotty->DrawCopy("same");
    }
    
    TCanvas *can2 = new TCanvas("can2","can2");
    can2->SetLogx();
    plotty->SetTitle("Tau");
    plotty->SetLineColor(myColours[7]);
    plotty->SetParameter(0,myEnergies[7]);
    plotty->SetParameter(1,1);
    plotty->DrawCopy();
    plotty->GetXaxis()->SetTitle("#nu");
    plotty->GetYaxis()->SetTitle("#nu d#{sigma}/d#{nu} (#{mu}b)");				
    for(int i=6;i>=0;i--) {
	plotty->SetLineColor(myColours[i]);
	plotty->SetParameter(0,myEnergies[i]);
	plotty->DrawCopy("same");
    }

}


Double_t funcsoftnudSdnu(Double_t *nu, Double_t *par)
{
    Double_t energy=par[0];
    Int_t isATau=int(par[1]+0.1);
    Double_t leptonMass=muonMass;
    if(isATau) {
	leptonMass=tauMass;
    }
    Double_t A=par[2];
    Double_t Z=par[3];
    
    return nu[0]*softPhotodSdnu(energy,nu[0],Z,A,leptonMass);

}

Double_t softPhotodSdnu(Double_t energy, Double_t nu, Double_t Z, Double_t A, Double_t leptonMass)
{
//    cout << "Boo!!" << endl;
    Double_t m1Sqd=0.54; //GeV^2
    Double_t m2Sqd=1.80; //GeV^2
    Double_t mlSqd=leptonMass*leptonMass;
    Double_t AtoThird=TMath::Power(A,1./3.);
//    cout << "Boo2" << endl;
    Double_t t=mlSqd*nu*nu/(1-nu);
//    cout << "Boo3" << endl;
    Double_t sigmaGN=getSigmaGammaN(nu,energy);
    Double_t z=0.00282*AtoThird*sigmaGN;
    Double_t Gz=getGz(z,Z);
    Double_t Hnu=getHnu(nu);
//    cout << Gz << endl;
//    cout << "Here" << endl;

    Double_t outside=(alpha/(8.*pi))*A*sigmaGN*nu;
//    cout << outside << endl;
    Double_t first=(Hnu+(2*mlSqd/m2Sqd))*TMath::Log(1+m2Sqd/t);
    Double_t second=(-2*mlSqd/t)*(1 - (0.25*m2Sqd/t)*TMath::Log(1+ t/m2Sqd));
    Double_t third=Hnu*(TMath::Log(1+ m1Sqd/t)-m1Sqd/(m1Sqd+t));
    Double_t fourth=(4*mlSqd/m1Sqd)*TMath::Log(1+m1Sqd/t);
    Double_t fifth=(-2*mlSqd/t)*(1-(0.25*m1Sqd-t)/(m1Sqd+t));
    Double_t left=first+second;
    Double_t right=Gz*(third+fourth+fifth);

   //  cout << first << " " << second << " " << third << " " 
// 	 << fourth << " " << fifth << endl;
//     cout << left << " " << right << endl;
//     cout << second << " " << leptonMass << " " << t<< endl;
    
    return outside*(left+right);//*microbarn;
}

Double_t getHnu(Double_t nu)
{
    return 1. - (2./nu) + (2./(nu*nu));
}


Double_t getSigmaGammaN(Double_t nu, Double_t energy)
{
    //in microbarns
    return 114.3 +1.647*TMath::Power(TMath::Log(0.0213*nu*energy),2);
}

Double_t getGz(Double_t z, Double_t Z) 
{
    if(Z>1) 
	return (9./z)*(0.5+((1+z)*TMath::Exp(-1*z)-1)/(z*z));
    
    return 3;
}


Double_t funchardnudSdnu(Double_t *nu, Double_t *par) {
    Double_t energy=par[0];
    Int_t isATau=int(par[1]+0.1);
    Double_t A=par[2];
//    cout << energy << "\t" << isATau << endl;
    return nu[0]*A*hardPhotodSdnu(energy,nu[0],isATau);
}

// Double_t funcPlot(Double_t *x, Double_t *par) 
// {
//     return linearInterpolation(x[0],photoEnergies,par,7);
    
// }



Double_t hardPhotodSdnu(Double_t energy, Double_t nu, Int_t isATau) {
  
    Double_t log10E=TMath::Log10(energy);   
    Double_t log10nu=TMath::Log10(nu);
    Double_t sum=0;
//    cout << log10E << endl;
    for(int i=0;i<8;i++) {
	Double_t newCoeff=linearInterpolation(log10E,photoEnergies,fACoeffs[isATau][i],7);
	sum+=newCoeff*TMath::Power(log10nu,i);	
    }	
    return sum/nu;    
}


    

Double_t linearInterpolation(Double_t x, Double_t *iX, Double_t *iY, Int_t numPoints)
{
    Int_t i1,i2;
    
    if(x>iX[numPoints-1]) {
	i1=numPoints-2;
	i2=numPoints-1;
    }
    else if(x<iX[0]) {
	i1=0;
	i2=1;    
    } 
    else {
	i1=TMath::BinarySearch(numPoints,iX,x);
	i2=i1+1;
    }
    Double_t m=(iY[i1]-iY[i2])/(iX[i1]-iX[i2]);
    Double_t retVal=iY[i1]-m*(iX[i1]-x);
    
    return retVal;
    
            	    
}



void bremPlot() 
{
//   plotBremAsFunctionOfNu();
   plotBremBetaAsFunctionOfEnergy();
}

void plotBremBetaAsFunctionOfEnergy() 
{
    TF1 *plotty = new TF1("plotty",getBetaForBrem,100,1e13,3);
    plotty->SetParameters(0,22,11);
    plotty->Draw();

}


Double_t getBetaForBrem(Double_t *energy, Double_t *par)
{
    Double_t isATau=par[0];
    Double_t A=par[1];
    Double_t Z=par[2]; 
    Double_t leptonMass=muonMass;
    if(int(isATau+0.1)) {
	leptonMass=tauMass;
    }      
    Double_t nuMax=getBremNuMax(energy[0],leptonMass,Z);
    TF1 temppy("temppy",funcBremnudSdnu,0,nuMax,4);
    temppy.SetParameters(energy[0],isATau,A,Z);
    Double_t integral=temppy.Integral(0,nuMax);
    return integral*Avogadro/(A*1e-6);
}

Double_t getBremNuMax(Double_t energy,Double_t leptonMass, Double_t Z)
{
    return 1- (0.75*TMath::Sqrt(TMath::Exp(1))*
	       (leptonMass/energy)*TMath::Power(Z,1./3.));
}

void plotBremAsFunctionOfNu() 
{
    Int_t myColours[8]={50,40,30,9,8,38,42,12};
    Double_t myEnergies[8]={1e9,3e9,1e10,3e10,1e11,3e11,1e12,3e12};
    
    TCanvas *can = new TCanvas("can","can");
    can->SetLogx();
    TF1 *plotty = new TF1("plotty",funcBremnudSdnu,1e-6,1,4);
    plotty->SetTitle("Muon");
    plotty->SetLineColor(myColours[7]);
    plotty->SetParameters(myEnergies[7],0,22,11);
    plotty->DrawCopy();
    plotty->GetXaxis()->SetTitle("#nu");
    plotty->GetYaxis()->SetTitle("#nu d#{sigma}/d#{nu} (#{mu}b)");				
    for(int i=6;i>=0;i--) {
	plotty->SetLineColor(myColours[i]);
	plotty->SetParameter(0,myEnergies[i]);
//	plotty->SetParameter(0,tauMass);
	plotty->DrawCopy("same");
    }
    
    TCanvas *can2 = new TCanvas("can2","can2");
    can2->SetLogx();
    plotty->SetTitle("Tau");
    plotty->SetLineColor(myColours[7]);
    plotty->SetParameter(0,myEnergies[7]);
    plotty->SetParameter(1,1);
    plotty->DrawCopy();
    plotty->GetXaxis()->SetTitle("#nu");
    plotty->GetYaxis()->SetTitle("#nu d#{sigma}/d#{nu} (#{mu}b)");				
    for(int i=6;i>=0;i--) {
	plotty->SetLineColor(myColours[i]);
	plotty->SetParameter(0,myEnergies[i]);
	plotty->DrawCopy("same");
    }

}



Double_t bremdSdnu(Double_t energy, Double_t nu, Double_t leptonMass, Double_t Z)
{
    Double_t re=classic_electr_radius;   
    Double_t Zto13=TMath::Power(Z,1./3.);
    Double_t Zto23=TMath::Power(Z,1./3.);
    Double_t mlSqd=leptonMass*leptonMass;
    Double_t q_c=(1.9*muonMass)/Zto13;
    Double_t zeta=TMath::Sqrt(1+(4*mlSqd/(q_c*q_c)));
    Double_t a_1=111.7/(Zto13*electronMass);
    Double_t a_2=724.2/(Zto23*electronMass);
    Double_t q_min=(mlSqd*nu)/(2*energy*(1-nu));
    Double_t x_1=a_1*q_min;
    Double_t x_2=a_2*q_min;
    Double_t Delta_1=0;
    if(Z>1) {
	Delta_1=TMath::Log(leptonMass/q_c)+
	    (zeta/2)*TMath::Log((zeta+1)/(zeta-1));
    }
    Double_t Delta_2=0;
    if(Z>1) {
	Delta_2=TMath::Log(leptonMass/q_c)+
	    (zeta/4)*(3-zeta*zeta)*TMath::Log((zeta+1)/(zeta-1))+
	    (2*mlSqd/(q_c*q_c));
    }
    Double_t Psi0_1=0.5*(1+TMath::Log((mlSqd*a_1*a_1)/(1+x_1*x_1)))-
	x_1*TMath::ATan(1./x_1)+
	(1./Z)*(0.5*(1+TMath::Log((mlSqd*a_2*a_2)/(1+x_2*x_2)))-
		 x_2*TMath::ATan(1./x_2));
    Double_t Psi0_2=0.5*((2./3.)+TMath::Log((mlSqd*a_1*a_1)/(1+x_1*x_1)))+
	2*x_1*x_1*(1-x_1*TMath::ATan(1./x_1)+
		   0.75*TMath::Log(x_1*x_1/(1+x_1*x_1)))+
	(1./Z)*(0.5*((2./3.)+TMath::Log((mlSqd*a_2*a_2)/(1+x_2*x_2)))+
	2*x_2*x_2*(1-x_2*TMath::ATan(1./x_2)+
		   0.75*TMath::Log(x_2*x_2/(1+x_2*x_2))));    
    Double_t Psi_1=Psi0_1-Delta_1;
    Double_t Psi_2=Psi0_2-Delta_2;

    Double_t outside=alpha*TMath::Power(2*re*Z*(electronMass/leptonMass),2);
    Double_t inside=(2-2*nu+nu*nu)*Psi_1-(2./3.)*(1-nu)*Psi_2;
    
    return outside*inside/nu;
}


Double_t knockOndSdNu(Double_t energy, Double_t nu, Double_t leptonMass, Double_t Z)
{
        Double_t re=classic_electr_radius;   
	Double_t nue_max=getKnockOnNuMax(energy,leptonMass);
	Double_t Me=electronMass;

	Double_t Delta_eg=getDelta_egamma(energy,nu,leptonMass);

	Double_t outside=(2*pi*re*re*Z*Me/energy);
	Double_t inside=(1./(nu*nu)-1./(nu*nue_max)+(1./2.));
	Double_t right(1.+Delta_eg);
	return outside*inside*right;	
}

Double_t getDelta_egamma(Double_t energy, Double_t nu, Double_t leptonMass) 
{
     
    Double_t Me=electronMass;
    Double_t Ml=leptonMass;
    
    Double_t Delta_eg=TMath::Log((4*energy*energy*(1.-nu))/(Ml*Ml))-
	TMath::Log(1.+(2*nu*energy/Me));
    Delta_eg*=(alpha/(2.*pi))*TMath::Log(1.+(2*nu*energy/Me));
    return Delta_eg;
}


Double_t getKnockOnNuMax(Double_t energy, Double_t leptonMass) 
{
    return (2.*electronMass*energy)/((leptonMass*leptonMass)+2*electronMass*energy);
}


Double_t ionizationdEdx(Double_t energy, Double_t leptonMass, Int_t material)
{
//    material 1 ==rock, 2 ==ice, anything else ==water

    Double_t pSqd=(energy*energy)-(leptonMass*leptonMass);
    Double_t beta=TMath::Sqrt(pSqd)/energy;
    Double_t betaSqd=beta*beta;
    Double_t gamma=energy/leptonMass;
    Double_t Me=electronMass;    
    Double_t Ml=leptonMass;
    Double_t E_max=(2*Me*pSqd)/(Me*Me+Ml*Ml+2*Me*energy);
    Double_t K=0.1535e-3; // GeV g-1 cm^2

    Double_t Ibar=75;
    Double_t C=-3.502;
    Double_t X0=0.240;
    Double_t X1=2.8;
    Double_t a=0.091;
    Double_t m=3.477;
    Double_t Z=6.6;
    Double_t A=11.89;
    Double_t rho=1.00;
    switch (material) 
    {	
	case 1:
	    Ibar=136.4;
	    C=-3.774;
	    X0=0.049;
	    X1=3.055;
	    a=0.083;
	    m=3.412;
	    Z=11;
	    A=22;
	    rho=2.65;
	    break;
	
	case 2:
	    rho=0.92;
	    break;
	    
	default:
	    //Stick with water
	    break;
    }
	    
    Double_t deltaX=getdeltaX(beta,gamma,X0,X1,a,m,C);
    
    Double_t outsideLeft=K*Z*rho/(A*betaSqd);
    Double_t first=TMath::Log((2*Me*pSqd*E_max)/(Ml*Ml*Ibar*Ibar));
    Double_t second=(E_max*E_max/(4*energy*energy))-2*beta*beta-deltaX;
    
    Double_t outsideRight=Avogadro*rho*energy/A;
    Double_t nue_max=getKnockOnNuMax(energy,leptonMass);
//    TF1 tempKnockIon("tempKnockIon",funcnuDelta_egamma,0,nue_max,4);
    TF1 tempKnockIon("tempKnockIon",funcKnockOnnudSdnu,0,nue_max,4);
    tempKnockIon.SetParameters(energy,leptonMass,A,Z);
    Double_t integral=tempKnockIon.Integral(0,nue_max);
    //cout << outsideRight << "\t" << integral << endl;

    return (outsideLeft*(first+second))+outsideRight*integral;	    

}

Double_t funcnuDelta_egamma(Double_t *nu, Double_t *par)
{
    Double_t energy=par[0];
    Double_t leptonMass=par[1];
    Double_t Z=par[3];
    Double_t re=classic_electr_radius;    
    Double_t outside=(2*pi*re*re*Z*electronMass/energy);
    return outside*nu[0]*getDelta_egamma(energy, nu[0], leptonMass) ;

}

Double_t getdeltaX(Double_t beta, Double_t gamma, Double_t X0, Double_t X1, Double_t a, Double_t m, Double_t C)
{
    Double_t pseudoX=TMath::Log10(beta*gamma);
    if(pseudoX>=X1)
	return (4.6052*pseudoX)+C;
    if(pseudoX>=X0)
        return (4.6052*pseudoX)+ a*TMath::Power((X1-pseudoX),m) +C;
    return 0;
}




Double_t funcOneOverBeta(Double_t *energy, Double_t *par)
{
    Int_t isATau=int(par[0]+0.1);
    if(isATau) 
	return funcOneOverBetaTau(energy,par);
    return funcOneOverBetaMuon(energy,par);
}

Double_t funcOneOverBetaMuon(Double_t *energy, Double_t *par) 
{ 
    Double_t density=par[1];
    static int gotCoeffs=0;
    static int numPoints=0;
    if(!gotCoeffs) {
	Double_t bremBeta;
	Double_t pairBeta;
	Double_t photoBeta;
	ifstream Input("muonBetaFile.txt");
	
	while(Input >> fEnergyMuon[numPoints] >> bremBeta 
	      >> pairBeta >> photoBeta) {	    
	    fOneOverBetasMuon[numPoints]=1./
		((bremBeta+pairBeta+photoBeta)*fEnergyMuon[numPoints]*density);
	    numPoints++;
	}    
	gotCoeffs=1;
    }
    
    return (1e-5)*1e6*linearInterpolation(energy[0],fEnergyMuon,fOneOverBetasMuon,numPoints);
        
}



Double_t funcOneOverBetaTau(Double_t *energy, Double_t *par) 
{ 
    Double_t density=par[1];
    static int gotCoeffs=0;
    static int numPoints=0;
    if(!gotCoeffs) {
	Double_t bremBeta;
	Double_t pairBeta;
	Double_t photoBeta;
	ifstream Input("tauBetaFile.txt");
	
	while(Input >> fEnergyTau[numPoints] >> bremBeta 
	      >> pairBeta >> photoBeta) {	    
	    fOneOverBetasTau[numPoints]=1./
		((bremBeta+pairBeta+photoBeta)*fEnergyTau[numPoints]*density);
	    numPoints++;
	}    
	gotCoeffs=1;
    }
    
    return (1e-5)*1e6*linearInterpolation(energy[0],fEnergyTau,fOneOverBetasTau,numPoints);
        
}

Double_t funcIntegralOneOverBeta(Double_t *energy, Double_t *par)
{    
    TF1 tempRange("tempRange",funcOneOverBeta,1,energy[0],2);
    tempRange.SetParameter(0,par[0]);
    tempRange.SetParameter(1,par[1]);
    Double_t minE=par[2];
    Double_t integral=(1e5)*tempRange.Integral(minE,energy[0]);
    return integral;
}



Double_t funcDecayRange(Double_t *energy, Double_t *par)
{
    Int_t isATau=int(par[0]+0.1);
    Double_t lifetime=muonLifetime;
    Double_t leptonMass=muonMass;
    if(isATau) {
	lifetime=tauLifetime;
	leptonMass=tauMass;
    }
    Double_t gamma=energy[0]/leptonMass;
//    cout << gamma << "\t" << lifetime << "\t" << c_light << endl;
    return (1e-5)*gamma*c_light*lifetime;
    
}

 



  
Double_t funcPairnudSdnu(Double_t *nu, Double_t *par)
{
    return nu[0]*funcPairdSdnu(nu,par);
}

Double_t funcPairdSdnu(Double_t *nu, Double_t *par)
{
    Double_t energy=par[0];
    Int_t isATau=int(par[1]+0.1);
    Double_t leptonMass=muonMass;
    if(isATau) {
	leptonMass=tauMass;
    }
//    Double_t A=par[2];
    Double_t Z=par[3];    

    if(nu[0]>fdSdNuPairNuCut && energy>1e8 && (Z<7 && Z>6)) {
	//Use parameterization
	if(isATau)
	    return linearInterpolation(nu[0],fdSdNuPairNus,fTaudSdNuPairValues,fdSdNuPairNumPoints);
	return linearInterpolation(nu[0],fdSdNuPairNus,fMuondSdNuPairValues,fdSdNuPairNumPoints);
    }
	
    return pairdSdnu(energy,nu[0],leptonMass,Z);

    //Missing something here
}

Double_t funcSlowPairdSdnu(Double_t *nu, Double_t *par)
{
    Double_t energy=par[0];
    Int_t isATau=int(par[1]+0.1);
    Double_t leptonMass=muonMass;
    if(isATau) {
	leptonMass=tauMass;
    }
//    Double_t A=par[2];
    Double_t Z=par[3];    


	
    return pairdSdnu(energy,nu[0],leptonMass,Z);

    //Missing something here
}


Double_t funcBremnudSdnu(Double_t *nu, Double_t *par)
{
    return nu[0]*funcBremdSdnu(nu,par);
}

Double_t funcBremdSdnu(Double_t *nu, Double_t *par)
{
    Double_t energy=par[0];
    Int_t isATau=int(par[1]+0.1);
    Double_t leptonMass=muonMass;
    if(isATau) {
	leptonMass=tauMass;
    }
//    Double_t A=par[2];
    Double_t Z=par[3];
    
    return bremdSdnu(energy,nu[0],leptonMass,Z);
    //Missing something here
}


Double_t funcPhotonudSdnu(Double_t *nu, Double_t *par) 
{
    return nu[0]*funcPhotodSdnu(nu,par);
}

Double_t funcPhotodSdnu(Double_t *nu, Double_t *par)
{
    Double_t energy=par[0];
    Int_t isATau=int(par[1]+0.1);
    Double_t leptonMass=muonMass;
    if(isATau) {
	leptonMass=tauMass;
    }
    Double_t A=par[2];
    Double_t Z=par[3];
    
    Double_t soft=softPhotodSdnu(energy,nu[0],Z,A,leptonMass);
    Double_t hard=A*hardPhotodSdnu(energy,nu[0],isATau);
 //    cout << nu[0] << "\t" << energy << "\t" << isATau << "\t" <<
// 	A << "\t" << Z << "\t" <<soft << "\t" << hard << endl;
    return (soft+hard)*microbarn;
}


Double_t funcKnockOnnudSdnu(Double_t *nu, Double_t *par)
{
    return nu[0]*funcKnockOndSdnu(nu,par);
}


Double_t funcKnockOndSdnu(Double_t *nu, Double_t *par)
{

    Double_t energy=par[0];
    Int_t isATau=int(par[1]+0.1);
    Double_t leptonMass=muonMass;
    if(isATau) {
	leptonMass=tauMass;
    }
//    Double_t A=par[2];
    Double_t Z=par[3];
    
    return knockOndSdNu(energy,nu[0],leptonMass,Z);
}


Double_t funcIonizationdEdx(Double_t *energy, Double_t *par) 
{    

    Int_t isATau=int(par[0]+0.1);
    Double_t leptonMass=muonMass;
    if(isATau) {
	leptonMass=tauMass;
    }
    Int_t material=int(par[1]+0.1);
    return ionizationdEdx(energy[0],leptonMass,material);


}

Double_t funcContinuousEnergyLoss(Double_t *energy, Double_t *par) 
{
    
    Double_t isATau=par[0];
    Double_t leptonMass=muonMass;
    if(int(isATau+0.1)) {
	leptonMass=tauMass;
    }
    Double_t material=par[1];
    Double_t nu_cut=par[2];
    Double_t Z=6.6;
    Double_t A=11.89;
    Double_t rho=1.00;
    switch (int(material+0.1)) 
    {	
	case 1: //Rock
	    Z=11;
	    A=22;
	    rho=2.65;
	    break;
	
	case 2: //Antarctic Ice
	    rho=0.92;
	    break;
	    
	default:
	    //Stick with water
	    break;
    }
    Double_t bremNuMin=0;
    Double_t pairNuMin=getPairNuMin(energy[0]);
    Double_t photoNuMin=0;
    Double_t knockOnNuMin=nu_cut;

    Double_t bremNuMax=getBremNuMax(energy[0],leptonMass,Z);
    if(nu_cut<bremNuMax) bremNuMax=nu_cut;
    Double_t pairNuMax=getPairNuMax(energy[0],leptonMass,Z);
    if(nu_cut<pairNuMax) pairNuMax=nu_cut;
    Double_t photoNuMax=nu_cut;
    Double_t knockOnNuMax=getKnockOnNuMax(energy[0],leptonMass);

    TF1 tempBrem("tempBremCEL",funcBremnudSdnu,bremNuMin,bremNuMax,4);
    TF1 tempPair("tempPairCEL",funcPairnudSdnu,pairNuMin,pairNuMax,4);
    TF1 tempPhoto("tempPhotoCEL",funcPhotonudSdnu,photoNuMin,photoNuMax,4);
    TF1 tempKnockOn("tempKnockOnCEL",funcKnockOnnudSdnu,
		    knockOnNuMin,knockOnNuMax,4);
    tempBrem.SetParameters(energy[0],isATau,A,Z);
    tempPair.SetParameters(energy[0],isATau,A,Z);
    tempPhoto.SetParameters(energy[0],isATau,A,Z);
    tempKnockOn.SetParameters(energy[0],isATau,A,Z);
    
    Double_t multiplier=Avogadro*rho*energy[0]/A;
    Double_t ionizationPart=ionizationdEdx(energy[0],leptonMass,int(material+0.1));
    Double_t bremPart=tempBrem.Integral(bremNuMin,bremNuMax);
    Double_t pairPart=tempPair.Integral(pairNuMin,pairNuMax);
    Double_t photoPart=tempPhoto.Integral(photoNuMin,photoNuMax);
    Double_t knockOnPart=tempKnockOn.Integral(knockOnNuMin,knockOnNuMax);

    return ionizationPart+(multiplier*(bremPart+photoPart+pairPart-knockOnPart));
}


Double_t funcMeanFreePath(Double_t *energy, Double_t *par) 
{
    
    Double_t isATau=par[0];
    Double_t leptonMass=muonMass;
    if(int(isATau+0.1)) {
	leptonMass=tauMass;
    }
    Double_t material=par[1];
    Double_t nu_cut=par[2];
    Double_t Z=6.6;
    Double_t A=11.89;
    Double_t rho=1.00;
    switch (int(material+0.1)) 
    {	
	case 1: //Rock
	    Z=11;
	    A=22;
	    rho=2.65;
	    break;
	
	case 2: //Antarctic Ice
	    rho=0.92;
	    break;
	    
	default:
	    //Stick with water
	    break;
    }
    
    Double_t multiplier=A/(rho*Avogadro);
    Double_t bremPart=getBremCrossAboveNuCut(energy[0],isATau,A,Z,nu_cut);    
    Double_t pairPart=getPairCrossAboveNuCut(energy[0],isATau,A,Z,nu_cut);    
    Double_t photoPart=getPhotoCrossAboveNuCut(energy[0],isATau,A,Z,nu_cut);   
    Double_t knockOnPart=getKnockOnCrossAboveNuCut(energy[0],isATau,A,Z,nu_cut);

    return multiplier/(bremPart+pairPart+photoPart+knockOnPart);
}

Double_t getBremCrossAboveNuCut(Double_t energy, Double_t isATau, Double_t A, Double_t Z, Double_t nu_cut)
{
    Double_t leptonMass=muonMass;
    if(int(isATau+0.1)) {
	leptonMass=tauMass;
    }
    Double_t bremNuMin=nu_cut;
    Double_t bremNuMax=getBremNuMax(energy,leptonMass,Z);
    if(bremNuMax>bremNuMin) {
	TF1 tempBrem("tempBremMFP",funcBremdSdnu,bremNuMin,bremNuMax,4);
	tempBrem.SetParameters(energy,isATau,A,Z);
	return tempBrem.Integral(bremNuMin,bremNuMax);
    }
    return 0;    
}


Double_t getPairCrossAboveNuCut(Double_t energy, Double_t isATau, Double_t A, Double_t Z, Double_t nu_cut)
{
    Double_t leptonMass=muonMass;
    if(int(isATau+0.1)) {
	leptonMass=tauMass;
    }
    Double_t pairNuMin=getPairNuMin(energy);
    if(nu_cut>pairNuMin) pairNuMin=nu_cut;
    Double_t pairNuMax=getPairNuMax(energy,leptonMass,Z);
    if(pairNuMax>pairNuMin) {
	TF1 tempPair("tempPairMFP",funcPairdSdnu,pairNuMin,pairNuMax,4);
	tempPair.SetParameters(energy,isATau,A,Z);
	return tempPair.Integral(pairNuMin,pairNuMax);
    }
    return 0;    
}


Double_t getPhotoCrossAboveNuCut(Double_t energy, Double_t isATau, Double_t A, Double_t Z, Double_t nu_cut)
{
    Double_t leptonMass=muonMass;
    if(int(isATau+0.1)) {
	leptonMass=tauMass;
    }
    Double_t photoNuMin=nu_cut;
    Double_t photoNuMax=1;
    if(photoNuMax>photoNuMin) {
	TF1 tempPhoto("tempPhotoMFP",funcPhotodSdnu,photoNuMin,photoNuMax,4);
	tempPhoto.SetParameters(energy,isATau,A,Z);
	return tempPhoto.Integral(photoNuMin,photoNuMax);
    }
    return 0;    
}


Double_t getKnockOnCrossAboveNuCut(Double_t energy, Double_t isATau, Double_t A, Double_t Z, Double_t nu_cut)
{
    Double_t leptonMass=muonMass;
    if(int(isATau+0.1)) {
	leptonMass=tauMass;
    }
    Double_t knockOnNuMin=nu_cut;
    Double_t knockOnNuMax=getKnockOnNuMax(energy,leptonMass);
    if(knockOnNuMax>knockOnNuMin) {
	TF1 tempKnockOn("tempKnockOnMFP",funcKnockOndSdnu,knockOnNuMin,knockOnNuMax,4);
	tempKnockOn.SetParameters(energy,isATau,A,Z);
	return tempKnockOn.Integral(knockOnNuMin,knockOnNuMax);
    }
    return 0;    
}


AskCons::InteractionType_t whichInteraction(Double_t randNum, Double_t energy, Double_t isATau, Double_t material, Double_t nu_cut)
{

    Double_t Z=6.6;
    Double_t A=11.89;
    switch (int(material+0.1)) 
    {	
	case 1: //Rock
	    Z=11;
	    A=22;
	    break;	
	case 2: //Antarctic Ice
	    break;	    
	default:
	    //Stick with water
	    break;
    }
    
    Double_t bremCross=getBremCrossAboveNuCut(energy,isATau,A,Z,nu_cut);
    Double_t pairCross=getPairCrossAboveNuCut(energy,isATau,A,Z,nu_cut);
    Double_t photoCross=getPhotoCrossAboveNuCut(energy,isATau,A,Z,nu_cut);
    Double_t knockOnCross=getKnockOnCrossAboveNuCut(energy,isATau,A,Z,nu_cut);
    Double_t totCross=bremCross+pairCross+photoCross+knockOnCross;
    
    Double_t bremThresh=bremCross/totCross;
    Double_t pairThresh=(bremCross+pairCross)/totCross;
    Double_t photoThesh=(bremCross+pairCross+photoCross)/totCross;    
    if(randNum<bremThresh) return AskCons::kBrem;
    if(randNum<pairThresh) return AskCons::kPair;
    if(randNum<photoThesh) return AskCons::kPhoto;
    return AskCons::kKnockOn;
}

// Double_t funcEnergyLossRange(Double_t *energy, Double_t *par)
// {
//     Double_t isATau=par[0];
//     Double_t material=par[1];
//     Double_t Z=6.6;
//     Double_t A=11.89;
//     Double_t rho=1.0;
//     switch (int(material+0.1)) 
//     {	
// 	case 1: //Rock
// 	    Z=11;
// 	    A=22;
// 	    rho=2.65;
// 	    break;	
// 	case 2: //Antarctic Ice
// 	    rho=0.92;
// 	    break;	    
// 	default:
// 	    //Stick with water
// 	    break;
//     }
    
// }


Double_t funcIntegralOneOverBetaSlow(Double_t *energy, Double_t *par)
{    
//    cout << "Here" << endl;
    TF1 tempRange("tempRange",funcOneOverBetaSlow,100,energy[0],2);
    tempRange.SetParameter(0,par[0]);
    tempRange.SetParameter(1,par[1]);
    Double_t integral=tempRange.Integral(1e7,energy[0]);
    cout << energy[0] << "\t" << integral << endl;
    return integral;
}


Double_t funcOneOverBetaSlow(Double_t *energy, Double_t *par) {
    //cout << "Here: " << energy[0] << "\t" << par[0] << "\t" << par[1] << endl;
    Double_t isATau=par[0];
    Double_t material=par[1];
    Double_t Z=6.6;
    Double_t A=11.89;
    Double_t rho=1.0;
    switch (int(material+0.1)) 
    {	
	case 1: //Rock
	    Z=11;
	    A=22;
	    rho=2.65;
	    break;	
	case 2: //Antarctic Ice
	    rho=0.92;
	    break;	    
	default:
	    //Stick with water
	    break;
    }

    TF1 tempBremy("tempBremy",getBetaForBrem,10,1e14,3);
    TF1 tempPairy("pairy",getBetaForPair,10,1e14,3);
    TF1 tempPhotoy("photoy",getBetaFromFulldSdnu,10,1e14,3);

    tempBremy.SetParameters(isATau,A,Z);
    tempPairy.SetParameters(isATau,A,Z);
    tempPhotoy.SetParameters(isATau,A,Z);
	
    Double_t bremBeta=tempBremy.Eval(energy[0]);
    Double_t pairBeta=tempPairy.Eval(energy[0]);
    Double_t photoBeta=tempPhotoy.Eval(energy[0]);

//    cout << energy[0] << " " << bremBeta << " " << pairBeta << " " << photoBeta << endl;
    
    Double_t oneOverBeta=1./
		((bremBeta+pairBeta+photoBeta)*energy[0]*rho);
    return (1e-5)*1e6*oneOverBeta;
    
}
  
Double_t funcCrossAboveNuCut(Double_t *energy, Double_t *par) 
{
    Double_t interactionType=par[0]; //0 Brem, 1 Pair, 2 Photo, 3 Knock-on
    Double_t isATau=par[1];
    Double_t material=par[2];
    Double_t nu_cut=par[3];
    Double_t Z=6.6;
    Double_t A=11.89;
    switch (int(material+0.1)) 
    {	
	case 1: //Rock
	    Z=11;
	    A=22;
	    break;	
	case 2: //Antarctic Ice
	    break;	    
	default:
	    //Stick with water
	    break;
    }
    
    switch (int(interactionType+0.1)) 
    {	
	case 0: //Brem
	    return getBremCrossAboveNuCut(energy[0],isATau,A,Z,nu_cut)/microbarn;
	case 1: //Pair
	    return getPairCrossAboveNuCut(energy[0],isATau,A,Z,nu_cut)/microbarn;
	case 2: //Photo
	    return getPhotoCrossAboveNuCut(energy[0],isATau,A,Z,nu_cut)/microbarn;
	case 3: //Knock-on
	    return getKnockOnCrossAboveNuCut(energy[0],isATau,A,Z,nu_cut)/microbarn;
	default:
	    //Stick with water
	    break;
    }
    return 0;
}


Double_t funcOneOverCELMFP(Double_t *energy, Double_t *par) 
{
    Double_t CEL=funcContinuousEnergyLoss(energy,par);
    Double_t MFP=funcMeanFreePath(energy,par);    
    return 1./(CEL*MFP);
}

Double_t funcOneOverCEL(Double_t *energy, Double_t *par) 
{
    return 1./funcContinuousEnergyLoss(energy,par);
}

Double_t funcOneOverCELQuick(Double_t *energy, Double_t *par) 
{
    Int_t isATau=int(par[0]+0.1);
    Int_t material=int(par[1]+0.1);
    Int_t nuCutTimes1000=int(double(par[2]*1000.0)+0.1); //0.001 --> 1

    if(material==2 && nuCutTimes1000==1) {
	if(isATau==0) 
	    return linearInterpolation(energy[0],fOneOverCELEnergy,fOneOverCELMuon,fOneOverCELNumPoints);
	if(isATau==1) 
	    return linearInterpolation(energy[0],fOneOverCELEnergy,fOneOverCELTau,fOneOverCELNumPoints);
    }    	
    return funcOneOverCEL(energy,par);
}



TGraph *getRightIntegral(TF1 *inputFunc, Double_t energy, Double_t lengthScale, Int_t numPoints)
{

    Double_t bestGuess=guessNewEnergyStraightLineMethod(inputFunc,energy,lengthScale);
    Double_t maxVal=energy;
    Double_t minVal=energy-2.*(energy-bestGuess);
    return computeRightIntegral(inputFunc,maxVal,minVal,numPoints);
}


TGraph *computeRightIntegral(TF1 *inputFunc, Double_t maxVal, Double_t minVal, Int_t numPoints) 
{
    Double_t logMaxVal=TMath::Log(maxVal);
    Double_t logSpacing=
	(logMaxVal-TMath::Log(minVal))/Double_t(numPoints);
    Double_t energies[numPoints];
    Double_t values[numPoints];

    Double_t lastY=0;
    Double_t lastEnergy=maxVal;
    for(int step=0;step<numPoints;step++) {
	Double_t newEnergy=TMath::Exp(logMaxVal-double(step)*logSpacing);
	Double_t spacing=TMath::Abs(lastEnergy-newEnergy);
	energies[step]=newEnergy;
	Double_t thisY=inputFunc->Eval(energies[step]);
	if(step>0) 
	    values[step]=(lastY*spacing)+0.5*(thisY-lastY)*spacing;
	else values[step]=0;	
	lastY=thisY;
//	cout << energies[step] << "\t" << values[step] << endl;
    }
    TGraph *grIntegral=new TGraph(numPoints,energies,values);
    return grIntegral;
}


Double_t getNewEnergy(Double_t startEnergy, Double_t length, Double_t isATau, Double_t material, Double_t nuCut, Int_t quickMethod)
{
    
    Int_t numPoints=100;
    TF1 *tempStrangey;

    if(quickMethod) 
	tempStrangey = new TF1("tempStrangey",funcOneOverCELQuick,1e8,1e12,3);
    else
	tempStrangey = new TF1("tempStrangey",funcOneOverCEL,1e8,1e12,3);


    tempStrangey->SetParameters(isATau,material,nuCut); // isAtau, material, nu_cut
//     if(quickMethod) 
// 	return guessNewEnergyStraightLineMethod(&tempStrangey,startEnergy,length);

    TGraph *grIntegral=getRightIntegral(tempStrangey,startEnergy,length,numPoints);
    Double_t *theX=grIntegral->GetX();
    Double_t *theY=grIntegral->GetY();
    Double_t newEnergy=linearInterpolation(length,theY,theX,numPoints);
    delete grIntegral;
    delete tempStrangey;
    return newEnergy;
}


Double_t guessNewEnergyStraightLineMethod(TF1 *inputFunc, Double_t energy, Double_t lengthScale)
{

    Double_t initialVal=inputFunc->Eval(energy);
    Double_t tempVal=inputFunc->Eval(energy/2.);
    Double_t m=2.*(initialVal-tempVal)/energy; 
    Double_t a=-m/2.;
    Double_t b=(m*energy-initialVal);
    Double_t c=(initialVal-energy*m/2.)*energy-lengthScale;
    
    Double_t value1=(-b + TMath::Sqrt(b*b-4*a*c))/(2*a);
    Double_t value2=(-b - TMath::Sqrt(b*b-4*a*c))/(2*a);
    
    Double_t bestGuess=value2;
    if(value2>energy) bestGuess=value1;
    return bestGuess;
}


Double_t funcDecayExponential(Double_t *x, Double_t *par) {
//    Double_t Reff=par[0];
//    Double_t scale=par[1];
    Double_t energy=par[0];
    Double_t isATau=par[1];
    Double_t leptonMass=muonMass;
    Double_t leptonLifetime=muonLifetime;
    if(int(isATau+0.1)) {
	leptonMass=tauMass;
	leptonLifetime=tauLifetime;
    }
    Double_t material=par[2];
    Double_t rho=1.00;
    switch (int(material+0.1)) 
    {	
	case 1: //Rock
	    rho=2.65;
	    break;
	
	case 2: //Antarctic Ice
	    rho=0.92;
	    break;
	    
	default:
	    //Stick with water
	    break;
    }
    Double_t gamma=energy/leptonMass;
    Double_t Reff=gamma*c_light*leptonLifetime*rho;
    return TMath::Exp(-1*x[0]/Reff);
}

Double_t funcDecayRangeCmWithRho(Double_t *energy, Double_t *par) {
    Double_t isATau=par[0];
    Double_t leptonMass=muonMass;
    Double_t leptonLifetime=muonLifetime;
    if(int(isATau+0.1)) {
	leptonMass=tauMass;
	leptonLifetime=tauLifetime;
    }
    Double_t material=par[1];
    Double_t rho=1.00;
    switch (int(material+0.1)) 
    {	
	case 1: //Rock
	    rho=2.65;
	    break;
	
	case 2: //Antarctic Ice
	    rho=0.92;
	    break;
	    
	default:
	    //Stick with water
	    break;
    }
    Double_t gamma=energy[0]/leptonMass;
    return gamma*c_light*leptonLifetime*rho;

}


#define NUM_ENERGIES 18
double fEnergies[NUM_ENERGIES]={1e7,2e7,6e7,1e8,2e8,6e8,1e9,2e9,6e9,1e10,2e10,6e10,1e11,2e11,6e11,1e12,2e12,6e12};

inline int getNewEnergyIndex(double energy)
{
    int index=TMath::BinarySearch(NUM_ENERGIES,fEnergies,energy);
    if(index<0) return 0;
    if(index>=NUM_ENERGIES-1) return NUM_ENERGIES-1;    
    if((energy-fEnergies[index])>(fEnergies[index+1]-energy)) index++;
    return index;
}

Double_t newFuncCEL(Double_t *energy, Double_t *par) 
{
    TStopwatch watchy;
    TStopwatch watchy2;
    TStopwatch watchy3;
    TStopwatch watchy4;
    TStopwatch watchy5;
    TStopwatch watchy6;
    watchy.Start(1);
    watchy2.Start(1);
    watchy3.Start(1);
    watchy4.Start(1);
    watchy5.Start(1);
    watchy6.Start(1);
    Double_t material=par[1];
    if(int(material+0.1)!=2) return funcContinuousEnergyLoss(energy,par);
//    cout <<"Here" << endl;
    Double_t isATau=par[0];
    Double_t nu_cut=par[2];
    Double_t Z=6.6;
    Double_t A=11.89;
    Double_t rho=0.92;
    
    static Double_t bremNuMin=0;
    static Double_t pairNuMin=0;
    static Double_t photoNuMin=0;
    static Double_t knockOnNuMin=0;

    static Double_t bremNuMaxMuon=nu_cut;
    static Double_t bremNuMaxTau=nu_cut;

    static Double_t pairNuMaxMuon=nu_cut;
    static Double_t pairNuMaxTau=nu_cut;
    
    static Double_t photoNuMax=nu_cut;
    static Double_t knockOnNuMaxMuon=nu_cut;
    static Double_t knockOnNuMaxTau=nu_cut;

    static TF1 *tempBremMuon;
    static TF1 *tempBremTau;
    static TF1 *tempPairMuon;
    static TF1 *tempPairTau;
    static TF1 *tempPhotoMuon[NUM_ENERGIES];
    static TF1 *tempPhotoTau[NUM_ENERGIES];
    
    static TF1 *tempKnockOnMuon;
    static TF1 *tempKnockOnTau;

    static int doneInit=0;
    if(!doneInit) {
	pairNuMin=getPairNuMin(energy[0]);
	bremNuMaxMuon=getBremNuMax(energy[0],muonMass,Z);
	if(nu_cut<bremNuMaxMuon) bremNuMaxMuon=nu_cut;
	bremNuMaxTau=getBremNuMax(energy[0],tauMass,Z);
	if(nu_cut<bremNuMaxTau) bremNuMaxTau=nu_cut;

	pairNuMaxMuon=getPairNuMax(energy[0],muonMass,Z);
	if(nu_cut<pairNuMaxMuon) pairNuMaxMuon=nu_cut;
	pairNuMaxTau=getPairNuMax(energy[0],tauMass,Z);
	if(nu_cut<pairNuMaxTau) pairNuMaxTau=nu_cut;

	knockOnNuMaxMuon=getKnockOnNuMax(energy[0],muonMass);	
	if(nu_cut<knockOnNuMaxMuon) knockOnNuMaxMuon=nu_cut;
	knockOnNuMaxTau=getKnockOnNuMax(energy[0],tauMass);	
	if(nu_cut<knockOnNuMaxTau) knockOnNuMaxTau=nu_cut;
	
	tempBremMuon = new TF1("tempBremMuonCEL",funcBremnudSdnu,0,nu_cut,4);
	tempBremTau = new TF1("tempBremTauCEL",funcBremnudSdnu,0,nu_cut,4);
	tempPairMuon = new TF1("tempPairMuonCEL",funcPairnudSdnu,0,nu_cut,4);
	tempPairTau = new TF1("tempPairTauCEL",funcPairnudSdnu,0,nu_cut,4);
	tempKnockOnMuon = new TF1("tempKnockOnMuonCEL",funcKnockOnnudSdnu,
				  0,nu_cut,4);
	
	tempKnockOnTau = new TF1("tempKnockOnTauCEL",funcKnockOnnudSdnu,
				 0,nu_cut,4);


	tempBremMuon->SetParameters(1e11,0,A,Z);
	tempPairMuon->SetParameters(1e11,0,A,Z);
	tempKnockOnMuon->SetParameters(1e11,0,A,Z);	    
	tempBremTau->SetParameters(1e11,1,A,Z);
	tempPairTau->SetParameters(1e11,1,A,Z);
	tempKnockOnTau->SetParameters(1e11,1,A,Z);
	char funcName[180];
	for(int i=0;i<NUM_ENERGIES;i++) {
	    sprintf(funcName,"tempPhotoMuonCEL%1.1E",fEnergies[i]);
	    tempPhotoMuon[i]= new TF1(funcName,funcPhotonudSdnu,photoNuMin,photoNuMax,4);
	    sprintf(funcName,"tempPhotoTauCEL%1.1E",fEnergies[i]);
	    tempPhotoTau[i]= new TF1(funcName,funcPhotonudSdnu,photoNuMin,photoNuMax,4);
	    tempPhotoMuon[i]->SetParameters(fEnergies[i],0,A,Z);
//	tempPhotoMuon[i]->SetNpx(1000);
	    tempPhotoTau[i]->SetParameters(fEnergies[i],1,A,Z);
//	tempPhotoTau[i]->SetNpx(1000);
	}		
	doneInit=1;
    }
    Double_t bremPart;
    Double_t ionizationPart=0;
    Double_t pairPart;
    Double_t photoPart;
    Double_t knockOnPart;

    Double_t multiplier=Avogadro*rho*energy[0]/A;
    if(isATau) {
	ionizationPart=ionizationdEdx(energy[0],tauMass,int(material+0.1));  
	watchy2.Stop();
	bremPart=tempBremTau->Integral(bremNuMin,bremNuMaxTau);   
	watchy3.Stop(); 
	pairPart=tempPairTau->Integral(pairNuMin,pairNuMaxTau); 
	watchy4.Stop(); 
	knockOnPart=tempKnockOnTau->Integral(knockOnNuMin,knockOnNuMaxTau); 
	watchy5.Stop(); 
	Int_t index=getNewEnergyIndex(energy[0]);
	photoPart=tempPhotoTau[index]->Integral(photoNuMin,photoNuMax);
	watchy6.Stop(); 
    }
    else {
	ionizationPart=ionizationdEdx(energy[0],muonMass,int(material+0.1)); 
	watchy2.Stop();
	bremPart=tempBremMuon->Integral(bremNuMin,bremNuMaxMuon);  
	watchy3.Stop(); 
	pairPart=tempPairMuon->Integral(pairNuMin,pairNuMaxMuon);
	watchy4.Stop(); 
	knockOnPart=tempKnockOnMuon->Integral(knockOnNuMin,knockOnNuMaxMuon); 
	watchy5.Stop(); 
	Int_t index=getNewEnergyIndex(energy[0]);
	photoPart=tempPhotoMuon[index]->Integral(photoNuMin,photoNuMax);
	watchy6.Stop(); 
    }
    watchy.Stop();
    cout << watchy.RealTime() << "\t" << watchy2.RealTime() 
	 << "\t" << watchy3.RealTime() << "\t" << watchy4.RealTime() 
	 << "\t" << watchy5.RealTime() << "\t" << watchy6.RealTime() << endl;

    return ionizationPart+(multiplier*(bremPart+photoPart+pairPart-knockOnPart));
}

Double_t newFuncOneOverCEL(Double_t *energy, Double_t *par) 
{
    return 1./newFuncCEL(energy,par);
}
